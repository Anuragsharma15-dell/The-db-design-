{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"readme.md":{"content":"# 🗄️ Database Schema Designer\nA modern, AI-powered web app for creating, visualizing, and exporting database schemas across multiple technologies.  \nSupports **8 database/ORM systems**, **AI-assisted schema generation** with **Cerebras** and **LLaMA models**, schema description generation, and production-ready **Docker integration** for seamless deployment.\n\n---\n\n\n## ❌ Problem\nDesigning and managing database schemas is often **complex and repetitive**:  \n- Developers juggle multiple databases and ORMs with different syntax.  \n- Manual schema design can lead to **errors, inconsistencies, and poor scalability**.  \n- Exporting schemas across teams in consistent formats is frustrating.  \n- Setting up environments manually slows down development and deployment.  \n- Lack of AI-driven insights means developers often miss **optimizations and best practices**.  \n\n---\n\n## ✅ Solution\nThe **Database Schema Designer** streamlines this entire process:  \n- 🧩 **One Tool for All**: Design schemas for **8 major database/ORM systems** in a single place.  \n- 🤖 **AI Integration**: Use **Cerebras + LLaMA** to generate, explain, and optimize schemas.  \n- 📂 **Easy Export**: Export your schemas to **YAML, JSON, and more** with a click.  \n- 📖 **Schema Documentation**: Auto-generate clear, human-readable schema descriptions.  \n- 🐳 **Dockerized**: Run locally or deploy anywhere with the included **Dockerfile & Compose** setup.  \n- 🚀 **Faster Development**: Reduce time spent on boilerplate and focus on building features.  \n\n---\n\n\n## 🚀 Features\n- **Multi-Database Support**  \n  Generate schemas for 8 database/ORM systems:  \n  - SQL  \n  - Prisma  \n  - Mongoose  \n  - TypeORM  \n  - Sequelize  \n  - MySQL  \n  - Oracle  \n  - SQL Server  \n\n- **AI-Powered Schema Generation** 🤖  \n  - Integrated with **Cerebras** for lightning-fast inference.  \n  - Uses **LLaMA models** for intelligent database design suggestions.  \n  - Get AI-assisted **schema explanations** and optimizations.  \n\n- **Export in Multiple Formats**  \n  Export schemas into **YAML, JSON, and more** for easy integration.  \n\n- **Schema Description**  \n  AI-generated, human-readable descriptions of your schema design.  \n\n- **Docker Integration** 🐳  \n  - Pre-built **Dockerfile** for quick setup.  \n  - Ready-to-use **Docker Compose** for multi-service orchestration.  \n  - Run locally or deploy seamlessly to the cloud.  \n\n- **One-Click Deployment**  \n  Containerized environment ensures consistent development and production builds.  \n\n---\n\n## 🔗 Demo\n[🌐 Live Demo Coming Soon](#)\n\n---\n\n## 🛠️ Tech Stack\n- **Frontend**: React, TailwindCSS, Framer Motion , Typescript \n- **Backend**: Node.js, Express  , postgress\n- **AI Models**: Cerebras API, LLaMA  \n- **Database Layer**: Multiple DB/ORM integrations (SQL, Prisma, Mongoose, etc.)  \n- **Export Engine**: JSON, YAML, Custom Exporters  \n- **Deployment**: Docker & Docker Compose  \n\n---\n\n## 📝 Usage\n1. Create a schema by selecting your preferred database/ORM.  \n2. Use **AI integration (Cerebras + LLaMA)** to auto-generate or optimize schemas.  \n3. View AI-powered schema descriptions and best practices.  \n4. Export the schema into JSON, YAML, or other formats.  \n5. Run the app locally or with **Docker** for production-ready usage.  \n\n---\n\n## 🎨 Customization & Development\n- Extend support for additional databases/ORMs.  \n- Add custom export formats.  \n- Fine-tune LLaMA prompts or switch to other AI models.  \n- Modify UI with your own branding using TailwindCSS.  \n\n---\n\n## 📄 License\nThis project is open-source under the **MIT License**.  \n\n---\n\n## 📧 Support & Contributions\n- Open an issue for bug reports or feature requests.  \n- Contributions are welcome—submit a pull request anytime.  \n\n---\n\n🌟 **Design, export, and deploy intelligent database schemas with AI + Docker!**\n","size_bytes":3856},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/Collabration.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport type { Server } from \"http\";\nimport { db } from \"./db\";\nimport { collaborationSessions } from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\ninterface CollaborationMessage {\n  type: \"join\" | \"leave\" | \"cursor\" | \"update\" | \"heartbeat\";\n  projectId: string;\n  userId: string;\n  username: string;\n  data?: any;\n}\n\ninterface ConnectedClient {\n  ws: WebSocket;\n  projectId: string;\n  userId: string;\n  username: string;\n  sessionId: string;\n}\n\nexport class CollaborationService {\n  private wss: WebSocketServer;\n  private clients: Map<WebSocket, ConnectedClient> = new Map();\n  private projectRooms: Map<string, Set<WebSocket>> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: \"/ws/collaborate\"\n    });\n\n    this.wss.on(\"connection\", this.handleConnection.bind(this));\n    \n    setInterval(() => this.cleanupInactiveSessions(), 30000);\n  }\n\n  private handleConnection(ws: WebSocket) {\n    console.log(\"New WebSocket connection\");\n\n    ws.on(\"message\", async (data: string) => {\n      try {\n        const message: CollaborationMessage = JSON.parse(data.toString());\n        await this.handleMessage(ws, message);\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n\n    ws.on(\"close\", () => {\n      this.handleDisconnection(ws);\n    });\n\n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n      this.handleDisconnection(ws);\n    });\n  }\n\n  private async handleMessage(ws: WebSocket, message: CollaborationMessage) {\n    switch (message.type) {\n      case \"join\":\n        await this.handleJoin(ws, message);\n        break;\n      case \"leave\":\n        await this.handleLeave(ws, message);\n        break;\n      case \"cursor\":\n        this.handleCursorUpdate(ws, message);\n        break;\n      case \"update\":\n        this.handleSchemaUpdate(ws, message);\n        break;\n      case \"heartbeat\":\n        await this.handleHeartbeat(ws, message);\n        break;\n    }\n  }\n\n  private async handleJoin(ws: WebSocket, message: CollaborationMessage) {\n    const { projectId, userId, username } = message;\n\n    const [session] = await db.insert(collaborationSessions).values({\n      projectId,\n      userId,\n      username,\n      isActive: true,\n      lastActivity: new Date(),\n    }).returning();\n\n    const client: ConnectedClient = {\n      ws,\n      projectId,\n      userId,\n      username,\n      sessionId: session.id,\n    };\n\n    this.clients.set(ws, client);\n\n    if (!this.projectRooms.has(projectId)) {\n      this.projectRooms.set(projectId, new Set());\n    }\n    this.projectRooms.get(projectId)!.add(ws);\n\n    const activeSessions = await db\n      .select()\n      .from(collaborationSessions)\n      .where(and(\n        eq(collaborationSessions.projectId, projectId),\n        eq(collaborationSessions.isActive, true)\n      ));\n\n    this.broadcast(projectId, {\n      type: \"user-joined\",\n      user: { userId, username },\n      activeUsers: activeSessions.map(s => ({\n        userId: s.userId,\n        username: s.username,\n      })),\n    }, ws);\n\n    ws.send(JSON.stringify({\n      type: \"joined\",\n      sessionId: session.id,\n      activeUsers: activeSessions.map(s => ({\n        userId: s.userId,\n        username: s.username,\n      })),\n    }));\n  }\n\n  private async handleLeave(ws: WebSocket, message: CollaborationMessage) {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    await db\n      .update(collaborationSessions)\n      .set({ isActive: false })\n      .where(eq(collaborationSessions.id, client.sessionId));\n\n    this.broadcast(client.projectId, {\n      type: \"user-left\",\n      user: { userId: client.userId, username: client.username },\n    }, ws);\n\n    this.removeClient(ws);\n  }\n\n  private handleCursorUpdate(ws: WebSocket, message: CollaborationMessage) {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    this.broadcast(client.projectId, {\n      type: \"cursor-update\",\n      userId: client.userId,\n      username: client.username,\n      cursor: message.data,\n    }, ws);\n  }\n\n  private handleSchemaUpdate(ws: WebSocket, message: CollaborationMessage) {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    this.broadcast(client.projectId, {\n      type: \"schema-update\",\n      userId: client.userId,\n      username: client.username,\n      changes: message.data,\n    }, ws);\n  }\n\n  private async handleHeartbeat(ws: WebSocket, message: CollaborationMessage) {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    await db\n      .update(collaborationSessions)\n      .set({ \n        lastActivity: new Date(),\n        cursorPosition: message.data?.cursor \n      })\n      .where(eq(collaborationSessions.id, client.sessionId));\n  }\n\n  private handleDisconnection(ws: WebSocket) {\n    const client = this.clients.get(ws);\n    if (!client) return;\n\n    db.update(collaborationSessions)\n      .set({ isActive: false })\n      .where(eq(collaborationSessions.id, client.sessionId))\n      .then(() => {\n        this.broadcast(client.projectId, {\n          type: \"user-left\",\n          user: { userId: client.userId, username: client.username },\n        });\n      });\n\n    this.removeClient(ws);\n  }\n\n  private removeClient(ws: WebSocket) {\n    const client = this.clients.get(ws);\n    if (client) {\n      const room = this.projectRooms.get(client.projectId);\n      if (room) {\n        room.delete(ws);\n        if (room.size === 0) {\n          this.projectRooms.delete(client.projectId);\n        }\n      }\n    }\n    this.clients.delete(ws);\n  }\n\n  private broadcast(projectId: string, message: any, excludeWs?: WebSocket) {\n    const room = this.projectRooms.get(projectId);\n    if (!room) return;\n\n    const messageStr = JSON.stringify(message);\n    room.forEach((clientWs) => {\n      if (clientWs !== excludeWs && clientWs.readyState === WebSocket.OPEN) {\n        clientWs.send(messageStr);\n      }\n    });\n  }\n\n  private async cleanupInactiveSessions() {\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    \n    await db\n      .update(collaborationSessions)\n      .set({ isActive: false })\n      .where(and(\n        eq(collaborationSessions.isActive, true),\n      ));\n  }\n}\n","size_bytes":6271},"server/cerebras.ts":{"content":"\nimport dotenv from \"dotenv\";\ndotenv.config();\ninterface CerebrasMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\ninterface CerebrasResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nexport class CerebrasService {\n  private apiKey: string ;\n  private baseUrl = \"https://api.cerebras.ai/v1\";\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async generateSchema(prompt: string, databaseType: string): Promise<{\n    schemas: {\n      sql: string;\n      prisma: string;\n      mongoose: string;\n      typeorm: string;\n      sequelize: string;\n      mysql: string;\n      oracle: string;\n      sqlserver: string;\n    };\n    explanation: string;\n    normalizationSuggestions: string;\n    queryExamples: Array<{ name: string; description: string; query: string }>;\n    migrationScript: string;\n    dockerfile: string;\n    dockerCompose: string;\n  }> {\n    const systemPrompt = `You are an expert database architect. Generate comprehensive database schemas based on user requirements.\n\nFor each request:\n1. Create optimized schemas for multiple database systems (PostgreSQL, MySQL, MongoDB, SQLite, Oracle, SQL Server)\n2. Generate ORM schemas (Prisma, TypeORM, Mongoose, Sequelize)\n3. Provide detailed explanation of design decisions\n4. Suggest normalization improvements\n5. Generate common query examples\n6. Create migration scripts\n7. Provide Dockerfile and docker-compose.yml for easy deployment\n\nRespond ONLY with valid JSON in this exact format:\n{\n  \"schemas\": {\n    \"sql\": \"PostgreSQL schema\",\n    \"mysql\": \"MySQL schema\",\n    \"oracle\": \"Oracle schema\",\n    \"sqlserver\": \"SQL Server schema\",\n    \"sqlite\": \"SQLite schema\",\n    \"prisma\": \"Prisma schema\",\n    \"typeorm\": \"TypeORM entities\",\n    \"mongoose\": \"Mongoose schemas\",\n    \"sequelize\": \"Sequelize models\"\n  },\n  \"explanation\": \"Detailed explanation\",\n  \"normalizationSuggestions\": \"Suggestions for normalization\",\n  \"queryExamples\": [{\"name\": \"query name\", \"description\": \"what it does\", \"query\": \"SQL query\"}],\n  \"migrationScript\": \"ALTER TABLE migration script\",\n  \"dockerfile\": \"Dockerfile content\",\n  \"dockerCompose\": \"docker-compose.yml content\"\n}`;\n\n    const userPrompt = `Generate a ${databaseType} database schema for: ${prompt}\n\nRequirements:\n- Design for scalability and performance\n- Follow database normalization best practices\n- Include proper indexes, constraints, and relationships\n- Provide realistic field types and constraints\n- Generate all schema formats requested`;\n\n    const messages: CerebrasMessage[] = [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: userPrompt },\n    ];\n\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.7,\n        max_tokens: 8000,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Cerebras API error: ${response.status} - ${error}`);\n    }\n\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n\n    try {\n      // Try to extract JSON from markdown code blocks first\n      const markdownMatch = content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n      let jsonString = markdownMatch ? markdownMatch[1] : content;\n      \n      // If no markdown blocks, try to find raw JSON\n      if (!markdownMatch) {\n        const jsonMatch = jsonString.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error(\"No JSON found in response\");\n        }\n        jsonString = jsonMatch[0];\n      }\n      \n      // Replace backtick template literals with regular strings (handles multiline)\n      jsonString = jsonString.replace(/`([\\s\\S]*?)`/g, (match, p1) => {\n        // Escape quotes and special chars in the captured content\n        const escaped = p1\n          .replace(/\\\\/g, '\\\\\\\\')  // Escape backslashes first\n          .replace(/\"/g, '\\\\\"')     // Escape quotes\n          .replace(/\\n/g, '\\\\n')    // Escape newlines\n          .replace(/\\r/g, '\\\\r')    // Escape carriage returns\n          .replace(/\\t/g, '\\\\t');   // Escape tabs\n        return `\"${escaped}\"`;\n      });\n      \n      const result = JSON.parse(jsonString);\n      return result;\n    } catch (parseError) {\n      console.error(\"Failed to parse Cerebras response:\", content);\n      throw new Error(\"Failed to parse AI response. Please try again.\");\n    }\n  }\n\n  async optimizeSchema(schema: string, databaseType: string): Promise<{\n    optimizedSchema: string;\n    suggestions: string;\n  }> {\n    const messages: CerebrasMessage[] = [\n      {\n        role: \"system\",\n        content: \"You are a database optimization expert. Analyze schemas and provide optimization suggestions.\",\n      },\n      {\n        role: \"user\",\n        content: `Analyze and optimize this ${databaseType} schema:\\n\\n${schema}\\n\\nProvide:\\n1. Optimized version\\n2. Detailed suggestions for improvements\\n\\nRespond in JSON: {\"optimizedSchema\": \"...\", \"suggestions\": \"...\"}`,\n      },\n    ];\n\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.5,\n        max_tokens: 4000,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Cerebras API error: ${response.status}`);\n    }\n\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n    \n    try {\n      // Try to extract JSON from markdown code blocks first\n      const markdownMatch = content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n      let jsonString = markdownMatch ? markdownMatch[1] : content;\n      \n      // If no markdown blocks, try to find raw JSON\n      if (!markdownMatch) {\n        const jsonMatch = jsonString.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error(\"No JSON found in response\");\n        }\n        jsonString = jsonMatch[0];\n      }\n      \n      // Replace backtick template literals with regular strings (handles multiline)\n      jsonString = jsonString.replace(/`([\\s\\S]*?)`/g, (match, p1) => {\n        // Escape quotes and special chars in the captured content\n        const escaped = p1\n          .replace(/\\\\/g, '\\\\\\\\')  // Escape backslashes first\n          .replace(/\"/g, '\\\\\"')     // Escape quotes\n          .replace(/\\n/g, '\\\\n')    // Escape newlines\n          .replace(/\\r/g, '\\\\r')    // Escape carriage returns\n          .replace(/\\t/g, '\\\\t');   // Escape tabs\n        return `\"${escaped}\"`;\n      });\n      \n      return JSON.parse(jsonString);\n  \n    } catch (parseError) {\n      console.error(\"Failed to parse optimization response:\", content);\n      throw new Error(\"Failed to parse AI response. Please try again.\");\n    }\n  }\n  async devOpsChatbotService(message: string): Promise<{ response: string }> {\n    const messages: CerebrasMessage[] = [\n      {\n        role: \"system\",\n        content: \"You are a helpful DevOps assistant. Provide expert advice on DevOps practices, CI/CD, containers, Kubernetes, infrastructure as code, monitoring, and more.\",\n      },\n      {\n        role: \"user\",\n        content: message,\n      },\n    ];\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.7,\n        max_tokens: 4000,\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`Cerebras API error: ${response.status}`);\n    }\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n    return { response: content };\n  }\n\n  async Genchat(message: string): Promise<{ response: string }> {\n    const messages: CerebrasMessage[] = [\n      {\n        role: \"system\",\n        content: \"You are a helpful gen-ai AI assistant. Provide expert advice on a wide range of topics like generative-ai , langchain , Rag , Vector-databases and everything about gen-ai.\",\n      },\n      {\n        role: \"user\",\n        content: message,\n      },\n    ];\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.7,\n        max_tokens: 4000,\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`Cerebras API error: ${response.status}`);\n    }\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n    return { response: content };\n  }\n\n  async Uichat(message: string): Promise<{ response: string }> {\n    const messages: CerebrasMessage[] = [\n      {\n        role: \"system\",\n        content: \"You are a helpful UI-builder  AI assistant. you Provide code for frontend for react, tailwind , framer-motion and typescript, javascript example=> user gives you a database schema and you give frontend code for the schema like for profile schema you give  code of profile page .\",\n      },\n      {\n        role: \"user\",\n        content: message,\n      },\n    ];\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.7,\n        max_tokens: 4000,\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`Cerebras API error: ${response.status}`);\n    }\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n    return { response: content };\n  }\n  async DatabaseAdvisor(message: string): Promise<{ response: string }> {\n    const messages: CerebrasMessage[] = [\n      {\n        role: \"system\", \n        content: \"You are a helpful Database Advisor  AI assistant. you Provide expert advice on database design, optimization, query writing, normalization, indexing, and best practices for SQL and NoSQL databases.\",\n      },\n      {\n        role: \"user\",\n         content: message,\n      },\n    ];\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.7,\n        max_tokens: 4000,\n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`Cerebras API error: ${response.status}`);\n    }\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n    return { response: content };\n  }\n\n  async analyzeMigration(migration: string, databaseType: string): Promise<{\n    analysis: string;\n    saferRewrite: string;\n    warnings: string[];\n    estimatedLockTime: string;\n    recommendations: string[];\n  }> {\n    const systemPrompt = `You are a database migration safety expert. Analyze SQL migrations and identify potential issues like table locks, data loss risks, performance impacts, and suggest safer alternatives.\n\nFocus on:\n1. Table locking concerns (ALTER TABLE operations)\n2. Data migration risks\n3. Performance impact on production\n4. Downtime estimation\n5. Safer migration strategies (nullable columns, backfills, multi-step migrations)\n\nRespond ONLY with valid JSON in this exact format:\n{\n  \"analysis\": \"Detailed analysis of the migration and its risks\",\n  \"saferRewrite\": \"A safer version of the migration SQL\",\n  \"warnings\": [\"warning 1\", \"warning 2\"],\n  \"estimatedLockTime\": \"Estimated lock time or 'None' if no locks\",\n  \"recommendations\": [\"recommendation 1\", \"recommendation 2\"]\n}`;\n\n    const userPrompt = `Analyze this ${databaseType} migration and check for safety issues:\n\n\\`\\`\\`sql\n${migration}\n\\`\\`\\`\n\nProvide:\n1. Detailed risk analysis\n2. Safer rewrite of the migration\n3. List of warnings\n4. Estimated lock time\n5. Step-by-step recommendations for safe execution`;\n\n    const messages: CerebrasMessage[] = [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: userPrompt },\n    ];\n\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.3,\n        max_tokens: 4000,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Cerebras API error: ${response.status} - ${error}`);\n    }\n\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n\n    try {\n      const markdownMatch = content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n      let jsonString = markdownMatch ? markdownMatch[1] : content;\n      \n      if (!markdownMatch) {\n        const jsonMatch = jsonString.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error(\"No JSON found in response\");\n        }\n        jsonString = jsonMatch[0];\n      }\n      \n      jsonString = jsonString.replace(/`([\\s\\S]*?)`/g, (match, p1) => {\n        const escaped = p1\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\"/g, '\\\\\"')\n          .replace(/\\n/g, '\\\\n')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/\\t/g, '\\\\t');\n        return `\"${escaped}\"`;\n      });\n      \n      return JSON.parse(jsonString);\n    } catch (parseError) {\n      console.error(\"Failed to parse migration analysis response:\", content);\n      throw new Error(\"Failed to parse AI response. Please try again.\");\n    }\n  }\n\n  async debugCICD(logs: string, pipelineYaml?: string): Promise<{\n    rootCause: string;\n    explanation: string;\n    suggestedFix: string;\n    fixedYaml?: string;\n    relatedIssues: string[];\n  }> {\n    const systemPrompt = `You are a CI/CD debugging expert. Analyze pipeline failures, identify root causes, and provide clear fixes.\n\nFocus on:\n1. Common CI/CD issues (dependency conflicts, environment mismatches, authentication failures)\n2. YAML syntax and configuration errors\n3. Build and deployment failures\n4. Version mismatches\n5. Clear explanations for junior developers\n\nRespond ONLY with valid JSON in this exact format:\n{\n  \"rootCause\": \"One-line summary of the root cause\",\n  \"explanation\": \"Detailed explanation in plain English\",\n  \"suggestedFix\": \"Step-by-step fix instructions\",\n  \"fixedYaml\": \"Corrected YAML configuration (if YAML was provided)\",\n  \"relatedIssues\": [\"related issue 1\", \"related issue 2\"]\n}`;\n\n    const userPrompt = `Debug this CI/CD pipeline failure:\n\n**Pipeline Logs:**\n\\`\\`\\`\n${logs}\n\\`\\`\\`\n\n${pipelineYaml ? `**Pipeline YAML:**\n\\`\\`\\`yaml\n${pipelineYaml}\n\\`\\`\\`` : ''}\n\nProvide:\n1. Root cause in plain English\n2. Detailed explanation\n3. Step-by-step fix\n4. Corrected YAML (if applicable)\n5. Related issues to watch for`;\n\n    const messages: CerebrasMessage[] = [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: userPrompt },\n    ];\n\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.3,\n        max_tokens: 4000,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Cerebras API error: ${response.status} - ${error}`);\n    }\n\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n\n    try {\n      const markdownMatch = content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n      let jsonString = markdownMatch ? markdownMatch[1] : content;\n      \n      if (!markdownMatch) {\n        const jsonMatch = jsonString.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error(\"No JSON found in response\");\n        }\n        jsonString = jsonMatch[0];\n      }\n      \n      jsonString = jsonString.replace(/`([\\s\\S]*?)`/g, (match, p1) => {\n        const escaped = p1\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\"/g, '\\\\\"')\n          .replace(/\\n/g, '\\\\n')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/\\t/g, '\\\\t');\n        return `\"${escaped}\"`;\n      });\n      \n      return JSON.parse(jsonString);\n    } catch (parseError) {\n      console.error(\"Failed to parse CI/CD debug response:\", content);\n      throw new Error(\"Failed to parse AI response. Please try again.\");\n    }\n  }\n\n  async analyzeInfraDrift(desiredState: string, actualState: string, iacType: string): Promise<{\n    driftSummary: string;\n    driftDetails: Array<{\n      resource: string;\n      field: string;\n      desired: string;\n      actual: string;\n      severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n    }>;\n    explanation: string;\n    autoFixSuggestions: string[];\n    dangerousChanges: string[];\n    recommendations: string;\n  }> {\n    const systemPrompt = `You are an infrastructure drift detection expert. Analyze differences between desired Infrastructure as Code (IaC) state and actual cloud resource state.\n\nFocus on:\n1. Identifying all configuration drifts\n2. Categorizing severity (low, medium, high, critical)\n3. Explaining drift in plain English\n4. Suggesting safe auto-fixes\n5. Flagging dangerous changes (security, data loss, downtime risks)\n\nRespond ONLY with valid JSON in this exact format:\n{\n  \"driftSummary\": \"One-line summary of overall drift status\",\n  \"driftDetails\": [\n    {\n      \"resource\": \"resource name/ID\",\n      \"field\": \"configuration field that drifted\",\n      \"desired\": \"value in IaC\",\n      \"actual\": \"value in cloud\",\n      \"severity\": \"low|medium|high|critical\"\n    }\n  ],\n  \"explanation\": \"Detailed explanation of all drifts and their implications\",\n  \"autoFixSuggestions\": [\"suggestion 1\", \"suggestion 2\"],\n  \"dangerousChanges\": [\"dangerous change 1\", \"dangerous change 2\"],\n  \"recommendations\": \"Overall recommendations for handling the drift\"\n}`;\n\n    const userPrompt = `Analyze infrastructure drift for ${iacType}:\n\n**Desired State (IaC):**\n\\`\\`\\`\n${desiredState}\n\\`\\`\\`\n\n**Actual State (Cloud):**\n\\`\\`\\`\n${actualState}\n\\`\\`\\`\n\nAnalyze:\n1. All configuration differences\n2. Severity of each drift\n3. Security implications\n4. Cost implications\n5. Performance impact\n6. Safe auto-fix options\n7. Dangerous changes to avoid`;\n\n    const messages: CerebrasMessage[] = [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: userPrompt },\n    ];\n\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"llama-3.3-70b\",\n        messages,\n        temperature: 0.3,\n        max_tokens: 4000,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Cerebras API error: ${response.status} - ${error}`);\n    }\n\n    const data: CerebrasResponse = await response.json();\n    const content = data.choices[0].message.content;\n\n    try {\n      const markdownMatch = content.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n      let jsonString = markdownMatch ? markdownMatch[1] : content;\n      \n      if (!markdownMatch) {\n        const jsonMatch = jsonString.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n          throw new Error(\"No JSON found in response\");\n        }\n        jsonString = jsonMatch[0];\n      }\n      \n      jsonString = jsonString.replace(/`([\\s\\S]*?)`/g, (match, p1) => {\n        const escaped = p1\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\"/g, '\\\\\"')\n          .replace(/\\n/g, '\\\\n')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/\\t/g, '\\\\t');\n        return `\"${escaped}\"`;\n      });\n      \n      return JSON.parse(jsonString);\n    } catch (parseError) {\n      console.error(\"Failed to parse infra drift response:\", content);\n      throw new Error(\"Failed to parse AI response. Please try again.\");\n    }\n  }\n\n}\n\n\n\nexport const cerebrasService = new CerebrasService(process.env.apiKey || \"\");\n","size_bytes":20926},"server/db.ts":{"content":"\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n   \"DATABASE_URL must be set. Did you forget to provision a database?\",\n   \n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":533},"server/docker-generation.ts":{"content":"interface DatabaseConfig {\n  type: string;\n  schema: string;\n  includeSampleData?: boolean;\n}\n\ninterface DockerFile {\n  name: string;\n  content: string;\n  path?: string;\n}\n\ninterface DockerGenerationResult {\n  dockerfile: string;\n  dockerCompose: string;\n  files: DockerFile[];\n  instructions: string;\n  dockerRunCommand: string;\n}\n\nexport class DockerGeneratorService {\n  private readonly SUPPORTED_DATABASES = ['postgresql', 'postgres', 'mysql', 'mongodb', 'mongo', 'sqlite', 'mssql', 'sqlserver'];\n\n  generateDockerConfiguration(config: DatabaseConfig): DockerGenerationResult {\n    const { type, schema, includeSampleData } = config;\n    const normalizedType = type.toLowerCase();\n\n    if (!this.SUPPORTED_DATABASES.includes(normalizedType)) {\n      throw new Error(`Unsupported database type: ${type}. Supported types are: PostgreSQL, MySQL, MongoDB, SQLite, SQL Server`);\n    }\n\n    switch (normalizedType) {\n      case 'postgresql':\n      case 'postgres':\n        return this.generatePostgresDocker(schema, includeSampleData);\n      case 'mysql':\n        return this.generateMySQLDocker(schema, includeSampleData);\n      case 'mongodb':\n      case 'mongo':\n        return this.generateMongoDocker(schema, includeSampleData);\n      case 'sqlite':\n        return this.generateSQLiteDocker(schema, includeSampleData);\n      case 'mssql':\n      case 'sqlserver':\n        return this.generateSQLServerDocker(schema, includeSampleData);\n      default:\n        throw new Error(`Unsupported database type: ${type}`);\n    }\n  }\n\n  private generatePostgresDocker(schema: string, includeSampleData?: boolean): DockerGenerationResult {\n    const dockerfile = `FROM postgres:alpine\n\nENV POSTGRES_USER=admin\nENV POSTGRES_PASSWORD=admin\nENV POSTGRES_DB=myapp\n\nCOPY ./init-db/ /docker-entrypoint-initdb.d/\n\nEXPOSE 5432\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\\\n  CMD pg_isready -U admin -d myapp || exit 1`;\n\n    const dockerCompose = `version: '3.8'\n\nservices:\n  postgres:\n    build: .\n    container_name: myapp-postgres\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: admin\n      POSTGRES_DB: myapp\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init-db:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U admin -d myapp\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n    driver: local`;\n\n    const initScript = `-- PostgreSQL Database Schema\n-- This file is automatically executed when the container starts\n\n${schema}\n\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- Add your sample data INSERT statements here\n-- Example:\n-- INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n` : ''}`;\n\n    const dockerRunCommand = `# Quick Start Command:\ndocker-compose up -d\n\n# Or build and run manually:\ndocker build -t myapp-postgres .\ndocker run -d -p 5432:5432 --name myapp-postgres myapp-postgres\n\n# Connect to database:\n# Host: localhost\n# Port: 5432\n# Database: myapp\n# User: admin\n# Password: admin\n\n# Connection string:\npostgresql://admin:admin@localhost:5432/myapp`;\n\n    const instructions = `# PostgreSQL Docker Setup Instructions\n\n## Files Included:\n1. **Dockerfile** - Container image definition\n2. **docker-compose.yml** - Complete stack configuration\n3. **init-db/01-schema.sql** - Database schema initialization\n\n## Quick Start:\n\n### Option 1: Using Docker Compose (Recommended)\n\\`\\`\\`bash\n# 1. Create project directory\nmkdir myapp-database && cd myapp-database\n\n# 2. Save files:\n#    - Save Dockerfile as \"Dockerfile\"\n#    - Save docker-compose.yml as \"docker-compose.yml\"\n#    - Create init-db folder and save init script as \"init-db/01-schema.sql\"\nmkdir init-db\n\n# 3. Start the database\ndocker-compose up -d\n\n# 4. Check status\ndocker-compose ps\n\n# 5. View logs\ndocker-compose logs -f\n\\`\\`\\`\n\n### Option 2: Using Docker Run\n\\`\\`\\`bash\n# 1. Build image\ndocker build -t myapp-postgres .\n\n# 2. Run container\ndocker run -d \\\\\n  -p 5432:5432 \\\\\n  -e POSTGRES_USER=admin \\\\\n  -e POSTGRES_PASSWORD=admin \\\\\n  -e POSTGRES_DB=myapp \\\\\n  -v $(pwd)/init-db:/docker-entrypoint-initdb.d \\\\\n  --name myapp-postgres \\\\\n  myapp-postgres\n\\`\\`\\`\n\n## Connection Details:\n- **Host**: localhost\n- **Port**: 5432\n- **Database**: myapp\n- **Username**: admin\n- **Password**: admin\n- **Connection String**: \\`postgresql://admin:admin@localhost:5432/myapp\\`\n\n## Useful Commands:\n\\`\\`\\`bash\n# Stop database\ndocker-compose down\n\n# Stop and remove volumes (deletes data)\ndocker-compose down -v\n\n# Access PostgreSQL CLI\ndocker exec -it myapp-postgres psql -U admin -d myapp\n\n# Backup database\ndocker exec myapp-postgres pg_dump -U admin myapp > backup.sql\n\n# Restore database\ndocker exec -i myapp-postgres psql -U admin myapp < backup.sql\n\\`\\`\\`\n\n## Security Note:\n⚠️ Change the default credentials before deploying to production!`;\n\n    return {\n      dockerfile,\n      dockerCompose,\n      files: [\n        { name: '01-schema.sql', content: initScript, path: 'init-db/' }\n      ],\n      instructions,\n      dockerRunCommand\n    };\n  }\n\n  private generateMySQLDocker(schema: string, includeSampleData?: boolean): DockerGenerationResult {\n    const dockerfile = `FROM mysql:8.0\n\nENV MYSQL_ROOT_PASSWORD=rootpassword\nENV MYSQL_DATABASE=myapp\nENV MYSQL_USER=admin\nENV MYSQL_PASSWORD=admin\n\nCOPY ./init-db/ /docker-entrypoint-initdb.d/\n\nEXPOSE 3306\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\\\n  CMD mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD || exit 1`;\n\n    const dockerCompose = `version: '3.8'\n\nservices:\n  mysql:\n    build: .\n    container_name: myapp-mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassword\n      MYSQL_DATABASE: myapp\n      MYSQL_USER: admin\n      MYSQL_PASSWORD: admin\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql_data:/var/lib/mysql\n      - ./init-db:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\", \"-u\", \"root\", \"-p$$MYSQL_ROOT_PASSWORD\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n    restart: unless-stopped\n\nvolumes:\n  mysql_data:\n    driver: local`;\n\n    const initScript = `-- MySQL Database Schema\nUSE myapp;\n\n${schema}\n\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- Add your sample data INSERT statements here\n-- Example:\n-- INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n` : ''}`;\n\n    const dockerRunCommand = `# Quick Start Command:\ndocker-compose up -d\n\n# Or build and run manually:\ndocker build -t myapp-mysql .\ndocker run -d -p 3306:3306 --name myapp-mysql myapp-mysql\n\n# Connect to database:\n# Host: localhost\n# Port: 3306\n# Database: myapp\n# User: admin\n# Password: admin\n\n# Connection string:\nmysql://admin:admin@localhost:3306/myapp`;\n\n    const instructions = `# MySQL Docker Setup Instructions\n\n## Files Included:\n1. **Dockerfile** - Container image definition\n2. **docker-compose.yml** - Complete stack configuration\n3. **init-db/01-schema.sql** - Database schema initialization\n\n## Quick Start:\n\n### Using Docker Compose (Recommended)\n\\`\\`\\`bash\n# 1. Create project directory\nmkdir myapp-database && cd myapp-database\n\n# 2. Save files and create init-db folder\nmkdir init-db\n\n# 3. Start the database\ndocker-compose up -d\n\n# 4. Check status\ndocker-compose ps\n\\`\\`\\`\n\n## Connection Details:\n- **Host**: localhost\n- **Port**: 3306\n- **Database**: myapp\n- **Username**: admin\n- **Password**: admin\n- **Root Password**: rootpassword\n- **Connection String**: \\`mysql://admin:admin@localhost:3306/myapp\\`\n\n## Useful Commands:\n\\`\\`\\`bash\n# Access MySQL CLI\ndocker exec -it myapp-mysql mysql -u admin -padmin myapp\n\n# Backup database\ndocker exec myapp-mysql mysqldump -u admin -padmin myapp > backup.sql\n\n# Restore database\ndocker exec -i myapp-mysql mysql -u admin -padmin myapp < backup.sql\n\\`\\`\\`\n\n## Security Note:\n⚠️ Change the default credentials before deploying to production!`;\n\n    return {\n      dockerfile,\n      dockerCompose,\n      files: [\n        { name: '01-schema.sql', content: initScript, path: 'init-db/' }\n      ],\n      instructions,\n      dockerRunCommand\n    };\n  }\n\n  private generateMongoDocker(schema: string, includeSampleData?: boolean): DockerGenerationResult {\n    const dockerfile = `FROM mongo:latest\n\nENV MONGO_INITDB_ROOT_USERNAME=admin\nENV MONGO_INITDB_ROOT_PASSWORD=admin\nENV MONGO_INITDB_DATABASE=myapp\n\nCOPY ./init-db/ /docker-entrypoint-initdb.d/\n\nEXPOSE 27017\n\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\\\n  CMD mongosh --eval \"db.adminCommand('ping')\" --quiet || exit 1`;\n\n    const dockerCompose = `version: '3.8'\n\nservices:\n  mongodb:\n    build: .\n    container_name: myapp-mongodb\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: admin\n      MONGO_INITDB_DATABASE: myapp\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n      - ./init-db:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--eval\", \"db.adminCommand('ping')\", \"--quiet\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n    restart: unless-stopped\n\nvolumes:\n  mongodb_data:\n    driver: local`;\n\n    const initScript = `// MongoDB Initialization Script\ndb = db.getSiblingDB('myapp');\n\n// Create collections and indexes\n${schema}\n\n${includeSampleData ? `\n// Sample Data (Optional)\n// Add your sample data here\n// Example:\n// db.users.insertMany([\n//   { name: 'John Doe', email: 'john@example.com' },\n//   { name: 'Jane Smith', email: 'jane@example.com' }\n// ]);\n` : ''}`;\n\n    const dockerRunCommand = `# Quick Start Command:\ndocker-compose up -d\n\n# Or build and run manually:\ndocker build -t myapp-mongodb .\ndocker run -d -p 27017:27017 --name myapp-mongodb myapp-mongodb\n\n# Connect to database:\n# Host: localhost\n# Port: 27017\n# Database: myapp\n# Username: admin\n# Password: admin\n\n# Connection string:\nmongodb://admin:admin@localhost:27017/myapp?authSource=admin`;\n\n    const instructions = `# MongoDB Docker Setup Instructions\n\n## Files Included:\n1. **Dockerfile** - Container image definition\n2. **docker-compose.yml** - Complete stack configuration\n3. **init-db/init-mongo.js** - Database initialization script\n\n## Quick Start:\n\n### Using Docker Compose (Recommended)\n\\`\\`\\`bash\n# 1. Create project directory\nmkdir myapp-database && cd myapp-database\n\n# 2. Save files and create init-db folder\nmkdir init-db\n\n# 3. Start the database\ndocker-compose up -d\n\n# 4. Check status\ndocker-compose ps\n\\`\\`\\`\n\n## Connection Details:\n- **Host**: localhost\n- **Port**: 27017\n- **Database**: myapp\n- **Username**: admin\n- **Password**: admin\n- **Connection String**: \\`mongodb://admin:admin@localhost:27017/myapp?authSource=admin\\`\n\n## Useful Commands:\n\\`\\`\\`bash\n# Access MongoDB shell\ndocker exec -it myapp-mongodb mongosh -u admin -p admin --authenticationDatabase admin\n\n# Backup database\ndocker exec myapp-mongodb mongodump --username admin --password admin --authenticationDatabase admin --db myapp --out /backup\n\n# Restore database\ndocker exec myapp-mongodb mongorestore --username admin --password admin --authenticationDatabase admin /backup\n\\`\\`\\`\n\n## Security Note:\n⚠️ Change the default credentials before deploying to production!`;\n\n    return {\n      dockerfile,\n      dockerCompose,\n      files: [\n        { name: 'init-mongo.js', content: initScript, path: 'init-db/' }\n      ],\n      instructions,\n      dockerRunCommand\n    };\n  }\n\n  private generateSQLiteDocker(schema: string, includeSampleData?: boolean): DockerGenerationResult {\n    const dockerfile = `FROM alpine:latest\n\nRUN apk add --no-cache sqlite bash\n\nWORKDIR /app\n\nCOPY ./init-db/schema.sql /app/init-db/schema.sql\nCOPY ./init.sh /app/init.sh\n\nRUN chmod +x /app/init.sh\n\nVOLUME /app/data\n\nENTRYPOINT [\"/app/init.sh\"]`;\n\n    const dockerCompose = `version: '3.8'\n\nservices:\n  sqlite:\n    build: .\n    container_name: myapp-sqlite\n    volumes:\n      - ./data:/app/data\n      - ./init-db:/app/init-db\n    restart: unless-stopped`;\n\n    const schemaSQL = `-- SQLite Database Schema\n${schema}\n\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- Add your sample data INSERT statements here\n-- Example:\n-- INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n` : ''}`;\n\n    const initScript = `#!/bin/bash\n# SQLite Initialization Script\n# This runs every time the container starts\n\nmkdir -p /app/data\n\nif [ ! -f /app/data/myapp.db ]; then\n  echo \"Initializing database...\"\n  sqlite3 /app/data/myapp.db < /app/init-db/schema.sql\n  echo \"Database initialized successfully\"\nelse\n  echo \"Database already exists, skipping initialization\"\nfi\n\n# Keep container running\ntail -f /dev/null`;\n\n    const dockerRunCommand = `# Quick Start Command:\ndocker-compose up -d\n\n# Or build and run manually:\ndocker build -t myapp-sqlite .\ndocker run -d -v $(pwd)/data:/app/data --name myapp-sqlite myapp-sqlite\n\n# Access database file at: ./data/myapp.db\n\n# Connect using sqlite3:\nsqlite3 ./data/myapp.db`;\n\n    const instructions = `# SQLite Docker Setup Instructions\n\n## Files Included:\n1. **Dockerfile** - Container image definition\n2. **docker-compose.yml** - Stack configuration\n3. **init-db/schema.sql** - Database schema\n4. **init.sh** - Initialization script\n\n## Quick Start:\n\n### Using Docker Compose (Recommended)\n\\`\\`\\`bash\n# 1. Create project directory\nmkdir myapp-database && cd myapp-database\n\n# 2. Create necessary folders\nmkdir -p init-db data\n\n# 3. Start the container\ndocker-compose up -d\n\\`\\`\\`\n\n## Database Access:\nThe SQLite database file is stored at \\`./data/myapp.db\\` and is accessible from your host machine.\n\n## Useful Commands:\n\\`\\`\\`bash\n# Access SQLite CLI inside container\ndocker exec -it myapp-sqlite sqlite3 /app/data/myapp.db\n\n# Copy database file to host\ndocker cp myapp-sqlite:/app/data/myapp.db ./myapp.db\n\n# Backup database\ncp ./data/myapp.db ./backup_$(date +%Y%m%d).db\n\\`\\`\\`\n\n## Note:\nSQLite is file-based and doesn't require network ports. The database file is persisted in the \\`./data\\` folder.`;\n\n    return {\n      dockerfile,\n      dockerCompose,\n      files: [\n        { name: 'schema.sql', content: schemaSQL, path: 'init-db/' },\n        { name: 'init.sh', content: initScript, path: '' }\n      ],\n      instructions,\n      dockerRunCommand\n    };\n  }\n\n  private generateSQLServerDocker(schema: string, includeSampleData?: boolean): DockerGenerationResult {\n    const dockerfile = `FROM mcr.microsoft.com/mssql/server:2022-latest\n\nENV ACCEPT_EULA=Y\nENV SA_PASSWORD=YourStrong@Password123\nENV MSSQL_PID=Express\n\nCOPY ./init-db/ /usr/src/app/\n\nUSER root\nRUN chmod +x /usr/src/app/entrypoint.sh\n\nEXPOSE 1433\n\nENTRYPOINT [\"/usr/src/app/entrypoint.sh\"]`;\n\n    const dockerCompose = `version: '3.8'\n\nservices:\n  sqlserver:\n    build: .\n    container_name: myapp-sqlserver\n    environment:\n      ACCEPT_EULA: Y\n      SA_PASSWORD: YourStrong@Password123\n      MSSQL_PID: Express\n    ports:\n      - \"1433:1433\"\n    volumes:\n      - sqlserver_data:/var/opt/mssql\n      - ./init-db:/usr/src/app\n    healthcheck:\n      test: [\"CMD\", \"/opt/mssql-tools/bin/sqlcmd\", \"-S\", \"localhost\", \"-U\", \"sa\", \"-P\", \"YourStrong@Password123\", \"-Q\", \"SELECT 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n      start_period: 60s\n    restart: unless-stopped\n\nvolumes:\n  sqlserver_data:\n    driver: local`;\n\n    const initScript = `-- SQL Server Database Schema\nCREATE DATABASE myapp;\nGO\n\nUSE myapp;\nGO\n\n${schema}\n\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- Add your sample data INSERT statements here\n-- Example:\n-- INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n` : ''}\nGO`;\n\n    const dockerRunCommand = `# Quick Start Command:\ndocker-compose up -d\n\n# Or build and run manually:\ndocker build -t myapp-sqlserver .\ndocker run -d -p 1433:1433 --name myapp-sqlserver myapp-sqlserver\n\n# Connect to database:\n# Host: localhost\n# Port: 1433\n# Database: myapp\n# User: sa\n# Password: YourStrong@Password123\n\n# Connection string:\nServer=localhost,1433;Database=myapp;User Id=sa;Password=YourStrong@Password123;TrustServerCertificate=True;`;\n\n    const instructions = `# SQL Server Docker Setup Instructions\n\n## Files Included:\n1. **Dockerfile** - Container image definition\n2. **docker-compose.yml** - Complete stack configuration\n3. **init-db/01-schema.sql** - Database schema initialization\n4. **init-db/entrypoint.sh** - Custom entrypoint script\n\n## Quick Start:\n\n### Using Docker Compose (Recommended)\n\\`\\`\\`bash\n# 1. Create project directory\nmkdir myapp-database && cd myapp-database\n\n# 2. Create init-db folder\nmkdir init-db\n\n# 3. Create entrypoint.sh\ncat > init-db/entrypoint.sh << 'EOF'\n#!/bin/bash\n/opt/mssql/bin/sqlservr &\nsleep 30\n/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Password123 -i /usr/src/app/01-schema.sql\nwait\nEOF\n\n# 4. Start the database\ndocker-compose up -d\n\n# 5. Check status (may take 60s to fully start)\ndocker-compose ps\n\\`\\`\\`\n\n## Connection Details:\n- **Host**: localhost\n- **Port**: 1433\n- **Database**: myapp\n- **Username**: sa\n- **Password**: YourStrong@Password123\n- **Connection String**: \\`Server=localhost,1433;Database=myapp;User Id=sa;Password=YourStrong@Password123;TrustServerCertificate=True;\\`\n\n## Useful Commands:\n\\`\\`\\`bash\n# Access SQL Server CLI\ndocker exec -it myapp-sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Password123'\n\n# Backup database\ndocker exec myapp-sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Password123' -Q \"BACKUP DATABASE myapp TO DISK = '/var/opt/mssql/backup/myapp.bak'\"\n\n# View logs\ndocker logs myapp-sqlserver\n\\`\\`\\`\n\n## Security Note:\n⚠️ Change the default SA password before deploying to production! Password must meet SQL Server complexity requirements.`;\n\n    const entrypoint = `#!/bin/bash\n/opt/mssql/bin/sqlservr &\nsleep 30\n/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Password123 -i /usr/src/app/01-schema.sql\nwait`;\n\n    return {\n      dockerfile,\n      dockerCompose,\n      files: [\n        { name: '01-schema.sql', content: initScript, path: 'init-db/' },\n        { name: 'entrypoint.sh', content: entrypoint, path: 'init-db/' }\n      ],\n      instructions,\n      dockerRunCommand\n    };\n  }\n}\n\nexport const dockerGeneratorService = new DockerGeneratorService();\n","size_bytes":18403},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport cors from \"cors\";\n\n\n// enable cors for all origins\n// this is needed for development when the client is served from a different port\n// in production the client and server are served from the same origin\n\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\nconsole.log(\"API Key:\", process.env.apiKey);\n\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5020;\n  server.listen(port, \"0.0.0.0\", () => {\n    console.log(`Database Designer server listening on port ${port}`);\n  });\n})();","size_bytes":2344},"server/kubernetes-generation.ts":{"content":"interface DatabaseConfig {\n  type: string;\n  schema: string;\n  includeSampleData?: boolean;\n}\n\ninterface K8sFile {\n  name: string;\n  content: string;\n  path?: string;\n}\n\ninterface KubernetesGenerationResult {\n  manifests: string;\n  files: K8sFile[];\n  instructions: string;\n}\n\nexport class KubernetesGeneratorService {\n  private readonly SUPPORTED_DATABASES = [\n    \"postgresql\", \"postgres\", \"mysql\", \"mongodb\", \"mongo\", \"sqlite\", \"mssql\", \"sqlserver\",\n  ];\n\n  generateKubernetesConfiguration(config: DatabaseConfig): KubernetesGenerationResult {\n    const { type, schema, includeSampleData } = config;\n    const normalizedType = type.toLowerCase();\n\n    if (!this.SUPPORTED_DATABASES.includes(normalizedType)) {\n      throw new Error(`Unsupported database type: ${type}. Supported: PostgreSQL, MySQL, MongoDB, SQLite, SQL Server`);\n    }\n\n    switch (normalizedType) {\n      case \"postgresql\":\n      case \"postgres\":\n        return this.generatePostgresK8s(schema, includeSampleData);\n      case \"mysql\":\n        return this.generateMySQLK8s(schema, includeSampleData);\n      case \"mongodb\":\n      case \"mongo\":\n        return this.generateMongoK8s(schema, includeSampleData);\n      case \"sqlite\":\n        return this.generateSQLiteK8s(schema, includeSampleData);\n      case \"mssql\":\n      case \"sqlserver\":\n        return this.generateSQLServerK8s(schema, includeSampleData);\n      default:\n        throw new Error(`Unsupported database type: ${type}`);\n    }\n  }\n\n  // ---------------- PostgreSQL ----------------\n  private generatePostgresK8s(schema: string, includeSampleData?: boolean): KubernetesGenerationResult {\n    const initScript = `-- PostgreSQL Database Schema\n${schema}\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- INSERT INTO users (name,email) VALUES ('John Doe','john@example.com');\n` : ''}`;\n\n    const configMap = `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: postgres-init-scripts\ndata:\n  01-schema.sql: |\n${initScript.split(\"\\n\").map(line => \"    \" + line).join(\"\\n\")}`;\n\n    const pvc = `apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi`;\n\n    const deployment = `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:alpine\n          ports:\n            - containerPort: 5432\n          env:\n            - name: POSTGRES_USER\n              value: \"admin\"\n            - name: POSTGRES_PASSWORD\n              value: \"admin\"\n            - name: POSTGRES_DB\n              value: \"myapp\"\n          volumeMounts:\n            - name: postgres-data\n              mountPath: /var/lib/postgresql/data\n            - name: init-scripts\n              mountPath: /docker-entrypoint-initdb.d\n      volumes:\n        - name: postgres-data\n          persistentVolumeClaim:\n            claimName: postgres-data\n        - name: init-scripts\n          configMap:\n            name: postgres-init-scripts`;\n\n    const service = `apiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  selector:\n    app: postgres\n  ports:\n    - protocol: TCP\n      port: 5432\n      targetPort: 5432\n  type: ClusterIP`;\n\n    const manifests = [configMap, pvc, deployment, service].join(\"\\n---\\n\");\n\n    const instructions = `# PostgreSQL Kubernetes Deployment Instructions\n1. Save each manifest to a .yaml file or use combined file.\n2. Apply manifests:\n   kubectl apply -f postgres-k8s.yaml\n3. Check pods:\n   kubectl get pods\n4. Access PostgreSQL within cluster using service 'postgres:5432'\n5. Use kubectl exec to access container if needed:\n   kubectl exec -it <pod-name> -- psql -U admin -d myapp`;\n\n    return {\n      manifests,\n      files: [{ name: \"postgres-k8s.yaml\", content: manifests }],\n      instructions,\n    };\n  }\n\n  // ---------------- MySQL ----------------\n  private generateMySQLK8s(schema: string, includeSampleData?: boolean): KubernetesGenerationResult {\n    const initScript = `USE myapp;\n${schema}\n${includeSampleData ? `\n-- Sample Data (Optional)\n-- INSERT INTO users (name,email) VALUES ('John Doe','john@example.com');\n` : ''}`;\n\n    const configMap = `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-init-scripts\ndata:\n  01-schema.sql: |\n${initScript.split(\"\\n\").map(line => \"    \" + line).join(\"\\n\")}`;\n\n    const pvc = `apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi`;\n\n    const deployment = `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n        - name: mysql\n          image: mysql:8.0\n          ports:\n            - containerPort: 3306\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: \"rootpassword\"\n            - name: MYSQL_DATABASE\n              value: \"myapp\"\n            - name: MYSQL_USER\n              value: \"admin\"\n            - name: MYSQL_PASSWORD\n              value: \"admin\"\n          volumeMounts:\n            - name: mysql-data\n              mountPath: /var/lib/mysql\n            - name: init-scripts\n              mountPath: /docker-entrypoint-initdb.d\n      volumes:\n        - name: mysql-data\n          persistentVolumeClaim:\n            claimName: mysql-data\n        - name: init-scripts\n          configMap:\n            name: mysql-init-scripts`;\n\n    const service = `apiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\nspec:\n  selector:\n    app: mysql\n  ports:\n    - protocol: TCP\n      port: 3306\n      targetPort: 3306\n  type: ClusterIP`;\n\n    const manifests = [configMap, pvc, deployment, service].join(\"\\n---\\n\");\n\n    const instructions = `# MySQL Kubernetes Deployment Instructions\nkubectl apply -f mysql-k8s.yaml\nkubectl get pods\nAccess MySQL inside cluster using service 'mysql:3306'\nUse kubectl exec -it <pod-name> -- mysql -u admin -p myapp`;\n\n    return { manifests, files: [{ name: \"mysql-k8s.yaml\", content: manifests }], instructions };\n  }\n\n  // ---------------- MongoDB ----------------\n  private generateMongoK8s(schema: string, includeSampleData?: boolean): KubernetesGenerationResult {\n    const initScript = `db = db.getSiblingDB('myapp');\n${schema}\n${includeSampleData ? `\n// Sample Data\n// db.users.insertMany([{ name: 'John Doe', email: 'john@example.com'}]);\n` : ''}`;\n\n    const configMap = `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mongo-init-scripts\ndata:\n  init-mongo.js: |\n${initScript.split(\"\\n\").map(line => \"    \" + line).join(\"\\n\")}`;\n\n    const pvc = `apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mongo-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi`;\n\n    const deployment = `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongodb\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n        - name: mongodb\n          image: mongo:latest\n          ports:\n            - containerPort: 27017\n          env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: \"admin\"\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: \"admin\"\n            - name: MONGO_INITDB_DATABASE\n              value: \"myapp\"\n          volumeMounts:\n            - name: mongo-data\n              mountPath: /data/db\n            - name: init-scripts\n              mountPath: /docker-entrypoint-initdb.d\n      volumes:\n        - name: mongo-data\n          persistentVolumeClaim:\n            claimName: mongo-data\n        - name: init-scripts\n          configMap:\n            name: mongo-init-scripts`;\n\n    const service = `apiVersion: v1\nkind: Service\nmetadata:\n  name: mongodb\nspec:\n  selector:\n    app: mongodb\n  ports:\n    - protocol: TCP\n      port: 27017\n      targetPort: 27017\n  type: ClusterIP`;\n\n    const manifests = [configMap, pvc, deployment, service].join(\"\\n---\\n\");\n\n    const instructions = `# MongoDB Kubernetes Deployment\nkubectl apply -f mongo-k8s.yaml\nkubectl get pods\nConnect to MongoDB inside cluster using 'mongodb:27017'\nkubectl exec -it <pod> -- mongosh -u admin -p admin --authenticationDatabase admin`;\n\n    return { manifests, files: [{ name: \"mongo-k8s.yaml\", content: manifests }], instructions };\n  }\n\n  // ---------------- SQLite (simple pod, not clustered) ----------------\n  private generateSQLiteK8s(schema: string, includeSampleData?: boolean): KubernetesGenerationResult {\n    const initScript = `-- SQLite Database Schema\n${schema}\n${includeSampleData ? `\n-- Sample Data\n-- INSERT INTO users (name,email) VALUES ('John Doe','john@example.com');\n` : ''}`;\n\n    const configMap = `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sqlite-init-sql\ndata:\n  schema.sql: |\n${initScript.split(\"\\n\").map(line => \"    \" + line).join(\"\\n\")}`;\n\n    const deployment = `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sqlite\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sqlite\n  template:\n    metadata:\n      labels:\n        app: sqlite\n    spec:\n      containers:\n        - name: sqlite\n          image: alpine:latest\n          command: [\"/bin/sh\", \"-c\"]\n          args:\n            - apk add --no-cache sqlite bash;\n              mkdir -p /app/data;\n              sqlite3 /app/data/myapp.db < /app/init/schema.sql;\n              tail -f /dev/null;\n          volumeMounts:\n            - name: data\n              mountPath: /app/data\n            - name: init-sql\n              mountPath: /app/init\n      volumes:\n        - name: data\n          emptyDir: {}\n        - name: init-sql\n          configMap:\n            name: sqlite-init-sql`;\n\n    const manifests = [configMap, deployment].join(\"\\n---\\n\");\n\n    const instructions = `# SQLite Kubernetes Deployment\nkubectl apply -f sqlite-k8s.yaml\nkubectl get pods\nSQLite DB file is inside pod at /app/data/myapp.db`;\n\n    return { manifests, files: [{ name: \"sqlite-k8s.yaml\", content: manifests }], instructions };\n  }\n\n  // ---------------- SQL Server ----------------\n  private generateSQLServerK8s(schema: string, includeSampleData?: boolean): KubernetesGenerationResult {\n    const initScript = `-- SQL Server Database Schema\nCREATE DATABASE myapp;\nUSE myapp;\n${schema}\n${includeSampleData ? `\n-- Sample Data\n-- INSERT INTO users (name,email) VALUES ('John Doe','john@example.com');\n` : ''}\nGO`;\n\n    const configMap = `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sqlserver-init-scripts\ndata:\n  01-schema.sql: |\n${initScript.split(\"\\n\").map(line => \"    \" + line).join(\"\\n\")}`;\n\n    const pvc = `apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: sqlserver-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi`;\n\n    const deployment = `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sqlserver\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sqlserver\n  template:\n    metadata:\n      labels:\n        app: sqlserver\n    spec:\n      containers:\n        - name: sqlserver\n          image: mcr.microsoft.com/mssql/server:2022-latest\n          ports:\n            - containerPort: 1433\n          env:\n            - name: ACCEPT_EULA\n              value: \"Y\"\n            - name: SA_PASSWORD\n              value: \"YourStrong@Password123\"\n          volumeMounts:\n            - name: data\n              mountPath: /var/opt/mssql\n            - name: init-scripts\n              mountPath: /usr/src/app\n      volumes:\n        - name: data\n          persistentVolumeClaim:\n            claimName: sqlserver-data\n        - name: init-scripts\n          configMap:\n            name: sqlserver-init-scripts`;\n\n    const service = `apiVersion: v1\nkind: Service\nmetadata:\n  name: sqlserver\nspec:\n  selector:\n    app: sqlserver\n  ports:\n    - protocol: TCP\n      port: 1433\n      targetPort: 1433\n  type: ClusterIP`;\n\n    const manifests = [configMap, pvc, deployment, service].join(\"\\n---\\n\");\n\n    const instructions = `# SQL Server Kubernetes Deployment\nkubectl apply -f sqlserver-k8s.yaml\nkubectl get pods\nConnect inside cluster via service 'sqlserver:1433'\nkubectl exec -it <pod> -- /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Password123'`;\n\n    return { manifests, files: [{ name: \"sqlserver-k8s.yaml\", content: manifests }], instructions };\n  }\n}\n\nexport const kubernetesGeneratorService = new KubernetesGeneratorService();\n","size_bytes":12626},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { cerebrasService } from \"./cerebras\";\nimport { dockerGeneratorService } from \"./docker-generation\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport { fromError } from \"zod-validation-error\";\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.get(\"/api/projects\", async (req, res, next) => {\n    try {\n      const projects = await storage.getAllProjects();\n      res.json(projects);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res, next) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res, next) => {\n    try {\n      const validationResult = insertProjectSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: fromError(validationResult.error).toString() \n        });\n      }\n\n      const project = await storage.createProject(validationResult.data);\n      res.status(201).json(project);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res, next) => {\n    try {\n      const project = await storage.updateProject(req.params.id, req.body);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res, next) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/generate-schema\", async (req, res, next) => {\n    try {\n      const { prompt, databaseType } = req.body;\n\n      if (!prompt || !databaseType) {\n        return res.status(400).json({ \n          message: \"prompt and databaseType are required\" \n        });\n      }\n\n      const result = await cerebrasService.generateSchema(prompt, databaseType);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Schema generation error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to generate schema\" \n      });\n    }\n  });\n\n  app.post(\"/api/optimize-schema\", async (req, res, next) => {\n    try {\n      const { schema, databaseType } = req.body;\n\n      if (!schema || !databaseType) {\n        return res.status(400).json({ \n          message: \"schema and databaseType are required\" \n        });\n      }\n\n      const result = await cerebrasService.optimizeSchema(schema, databaseType);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Schema optimization error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to optimize schema\" \n      });\n    }\n  });\n\n  app.post(\"/api/generate-docker\", async (req, res, next) => {\n    try {\n      const { databaseType, schema, includeSampleData } = req.body;\n\n      if (!databaseType || !schema) {\n        return res.status(400).json({ \n          message: \"databaseType and schema are required\" \n        });\n      }\n\n      const result = dockerGeneratorService.generateDockerConfiguration({\n        type: databaseType,\n        schema,\n        includeSampleData: includeSampleData || false\n      });\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Docker generation error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to generate Docker configuration\" \n      });\n    }\n  });\n  app.post(\"/api/devops-chatbot\", async (req, res, next) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"message is required\" });\n      }\n\n      const result = await cerebrasService.devOpsChatbotService(message);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"DevOps chatbot error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to process message\" \n      });\n    }\n  });\n\n\n  app.post(\"/api/generate-docker\", async (req, res, next) => {\n    try {\n      const { databaseType, schema, includeSampleData } = req.body;\n\n      if (!databaseType || !schema) {\n        return res.status(400).json({ \n          message: \"databaseType and schema are required\" \n        });\n      }\n\n      const result = dockerGeneratorService.generateDockerConfiguration({\n        type: databaseType,\n        schema,\n        includeSampleData: includeSampleData || false\n      });\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Docker generation error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to generate Docker configuration\" \n      });\n    }\n  });\n  app.post(\"/api/gen-chat\", async (req, res, next) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"message is required\" });\n      }\n\n     \n\n\n      const result = await cerebrasService.Genchat(message);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"DevOps chatbot error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to process message\" \n      });\n    }\n  });\n\n  app.post(\"/api/database-chat\", async (req, res, next) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"message is required\" });\n      }\n\n     \n\n\n      const result = await cerebrasService.DatabaseAdvisor(message);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Database  chatbot error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to process message\" \n      });\n    }\n  });\n\n\n\n\n   app.post(\"/api/ui-builder\", async (req, res, next) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"message is required\" });\n      }\n\n     \n\n\n      const result = await cerebrasService.Uichat(message);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"UI chatbot error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to process message\" \n      });\n    }\n  });\n\n  app.post(\"/api/analyze-migration\", async (req, res, next) => {\n    try {\n      const { migration, databaseType } = req.body;\n      if (!migration || !databaseType) {\n        return res.status(400).json({ message: \"migration and databaseType are required\" });\n      }\n\n      const result = await cerebrasService.analyzeMigration(migration, databaseType);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Migration analysis error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to analyze migration\" \n      });\n    }\n  });\n\n  app.post(\"/api/debug-cicd\", async (req, res, next) => {\n    try {\n      const { logs, pipelineYaml } = req.body;\n      if (!logs) {\n        return res.status(400).json({ message: \"logs are required\" });\n      }\n\n      const result = await cerebrasService.debugCICD(logs, pipelineYaml);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"CI/CD debug error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to debug CI/CD pipeline\" \n      });\n    }\n  });\n\n  app.post(\"/api/analyze-drift\", async (req, res, next) => {\n    try {\n      const { desiredState, actualState, iacType } = req.body;\n      if (!desiredState || !actualState || !iacType) {\n        return res.status(400).json({ message: \"desiredState, actualState, and iacType are required\" });\n      }\n\n      const result = await cerebrasService.analyzeInfraDrift(desiredState, actualState, iacType);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Infra drift analysis error:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to analyze infrastructure drift\" \n      });\n    }\n  });\n\n  \n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":8465},"server/storage.ts":{"content":"import { type User, type InsertUser, type Project, type InsertProject, projects, users } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getAllProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n}\n\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: (users, { eq }) => eq(users.id, id),\n    });\n    return result;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: (users, { eq }) => eq(users.username, username),\n    });\n    return result;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user!;\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    const result = await db.select().from(projects).orderBy(desc(projects.createdAt));\n    return result;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const result = await db.query.projects.findFirst({\n      where: (projects, { eq }) => eq(projects.id, id),\n    });\n    return result;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject!;\n  }\n\n  async updateProject(id: string, projectUpdate: Partial<InsertProject>): Promise<Project | undefined> {\n    const [updated] = await db\n      .update(projects)\n      .set({ ...projectUpdate, updatedAt: new Date() } as any)\n      .where(eq(projects.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id)).returning();\n    return result.length > 0;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":2340},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  databaseType: varchar(\"database_type\", { length: 50 }).notNull(),\n  schemas: jsonb(\"schemas\").notNull().$type<{\n    sql: string;\n    prisma: string;\n    mongoose: string;\n    typeorm: string;\n    sequelize: string;\n    mysql: string;\n    oracle: string;\n    sqlserver: string;\n    sqlite: string;\n  }>(),\n  explanation: text(\"explanation\").notNull(),\n  normalizationSuggestions: text(\"normalization_suggestions\"),\n  queryExamples: jsonb(\"query_examples\").$type<Array<{\n    name: string;\n    description: string;\n    query: string;\n  }>>(),\n  migrationScript: text(\"migration_script\"),\n  dockerfile: text(\"dockerfile\"),\n  dockerCompose: text(\"docker_compose\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const collaborationSessions = pgTable(\"collaboration_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull(),\n  username: text(\"username\").notNull(),\n  cursorPosition: jsonb(\"cursor_position\").$type<{ x: number; y: number }>(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  lastActivity: timestamp(\"last_activity\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const selectProjectSchema = createSelectSchema(projects);\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n","size_bytes":2547},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Database } from \"lucide-react\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NewSchema from \"@/pages/new-schema\";\nimport Exports from \"@/pages/exports\";\nimport DockerExport from \"@/pages/docker-export\";\nimport NotFound from \"@/pages/not-found\";\nimport DevOpsChat from \"@/pages/devops-chat\";\nimport Uibuilder from \"./pages/Ui-generator\";\nimport GenAIChat from \"./pages/Genai\";\nimport KubernetesExport from \"./pages/kubernetes-export\";\nimport DatabaseAdvisorChatbot from \"./pages/Database-chat\";\nimport MigrationSafety from \"./pages/migration-safety\";\nimport CICDDebug from \"./pages/ci-cddebug\";\nimport InfraDrift from \"./pages/infra-drift\";\nimport VoiceChat from \"./pages/voice-chat\";\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider defaultTheme=\"dark\">\n          <SidebarProvider style={style as React.CSSProperties}>\n            <Switch>\n              <Route path=\"/\">\n                <div className=\"flex flex-col min-h-screen\">\n                  <header className=\"fixed top-0 left-0 right-0 z-50 flex items-center justify-between px-6 py-4 bg-background/80 backdrop-blur-lg border-b border-border\">\n                    <div className=\"flex items-center gap-2\">\n                      <Database className=\"h-6 w-6 text-primary\" />\n                      <span className=\"text-xl font-bold\">Db_design</span>\n                    </div>\n                    <ThemeToggle />\n                  </header>\n                  <main className=\"flex-1\">\n                    <Landing />\n                  </main>\n                </div>\n              </Route>\n              <Route>\n                <div className=\"flex h-screen w-full\">\n                  <AppSidebar />\n                  <div className=\"flex flex-col flex-1 overflow-hidden\">\n                    <header className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n                      <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                      <ThemeToggle />\n                    </header>\n                    <main className=\"flex-1 overflow-auto\">\n                      <Switch>\n                        <Route path=\"/dashboard\" component={Dashboard} />\n                        <Route path=\"/new\" component={NewSchema} />\n                        <Route path=\"/exports\" component={Exports} />\n                        <Route path=\"/docker-export\" component={DockerExport} />\n                       <Route path='/devops-chat' component={DevOpsChat} />\n                       <Route path='/ui-builder' component={Uibuilder} />\n                          <Route path='/voice-chat' component={VoiceChat} />\n                       <Route path='/database-chat' component={DatabaseAdvisorChatbot} />\n                       <Route path='/gen-chat' component={GenAIChat} />\n                       <Route path='/kubernetes-export' component={KubernetesExport} />\n                       <Route path='/migration-safety' component={MigrationSafety} />\n                       <Route path='/cicd-debug' component={CICDDebug} />\n                       <Route path='/infra-drift' component={InfraDrift} />\n                        \n                    \n                        <Route component={NotFound} />\n                      </Switch>\n                    </main>\n                  </div>\n                </div>\n              </Route>\n            </Switch>\n          </SidebarProvider>\n          <Toaster />\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4287},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  .bg-grid-pattern {\n    background-image: \n      linear-gradient(to right, hsl(var(--border)) 1px, transparent 1px),\n      linear-gradient(to bottom, hsl(var(--border)) 1px, transparent 1px);\n    background-size: 4rem 4rem;\n  }\n}\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 214 32% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 214 32% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 214 32% 88%;\n\n  --sidebar-primary: 262 83% 58%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 91% 96%;\n\n  --sidebar-accent-foreground: 217 91% 30%;\n\n  --sidebar-ring: 262 83% 58%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 214 32% 88%;\n\n  --primary: 262 83% 58%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 215 16% 90%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 214 20% 92%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 217 91% 94%;\n\n  --accent-foreground: 217 91% 35%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 214 32% 75%;\n  --ring: 262 83% 58%;\n  --chart-1: 262 83% 45%;\n  --chart-2: 217 91% 50%;\n  --chart-3: 173 58% 39%;\n  --chart-4: 43 96% 56%;\n  --chart-5: 27 87% 57%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, ui-monospace, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 47% 11% / 0.10);\n  --shadow-sm: 0px 2px 4px -1px hsl(222 47% 11% / 0.06), 0px 1px 2px -1px hsl(222 47% 11% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(222 47% 11% / 0.08), 0px 2px 4px -1px hsl(222 47% 11% / 0.06);\n  --shadow-md: 0px 6px 10px -2px hsl(222 47% 11% / 0.10), 0px 2px 4px -1px hsl(222 47% 11% / 0.06);\n  --shadow-lg: 0px 12px 16px -4px hsl(222 47% 11% / 0.12), 0px 4px 6px -2px hsl(222 47% 11% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 47% 11% / 0.15), 0px 10px 10px -5px hsl(222 47% 11% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 47% 11% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 215 28% 25%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 215 28% 28%;\n\n  --sidebar: 217 33% 14%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 215 28% 22%;\n\n  --sidebar-primary: 262 83% 68%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 215 28% 22%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 262 83% 68%;\n\n  --popover: 215 28% 22%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 215 28% 30%;\n\n  --primary: 262 83% 68%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 215 20% 25%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 215 28% 20%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 91% 22%;\n\n  --accent-foreground: 217 91% 90%;\n\n  --destructive: 0 84% 35%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 215 28% 40%;\n  --ring: 262 83% 68%;\n  --chart-1: 262 83% 75%;\n  --chart-2: 217 91% 70%;\n  --chart-3: 173 58% 65%;\n  --chart-4: 43 96% 70%;\n  --chart-5: 27 87% 72%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 10px -2px hsl(0 0% 0% / 0.35), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-lg: 0px 12px 16px -4px hsl(0 0% 0% / 0.40), 0px 4px 6px -2px hsl(0 0% 0% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.50), 0px 10px 10px -5px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.70);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10122},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-input.tsx":{"content":"import { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Loader2 } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface AIInputProps {\n  onGenerate: (prompt: string) => void;\n  isGenerating?: boolean;\n}\n\nconst examplePrompts = [\n  \"Build me a food delivery app schema\",\n  \"E-commerce platform with multi-vendor support\",\n  \"Social media app with posts, comments, and likes\",\n  \"Task management system with teams and projects\",\n];\n\nexport function AIInput({ onGenerate, isGenerating = false }: AIInputProps) {\n  const [prompt, setPrompt] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (prompt.trim() && !isGenerating) {\n      onGenerate(prompt);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n      className=\"space-y-4\"\n    >\n      <div className=\"relative\">\n        <Textarea\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          placeholder=\"Describe your database schema in natural language...\"\n          className=\"min-h-32 resize-none border-2 border-input bg-background/50 backdrop-blur-sm text-base pr-12\"\n          data-testid=\"input-ai-prompt\"\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" && (e.metaKey || e.ctrlKey)) {\n              handleSubmit();\n            }\n          }}\n        />\n        <div className=\"absolute right-3 top-3\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n        </div>\n        <AnimatePresence>\n          {isGenerating && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"absolute inset-0 rounded-lg border-2 border-primary animate-pulse pointer-events-none\"\n            />\n          )}\n        </AnimatePresence>\n      </div>\n\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          {examplePrompts.slice(0, 2).map((example, index) => (\n            <Button\n              key={index}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPrompt(example)}\n              className=\"text-xs hover-elevate active-elevate-2\"\n              data-testid={`button-example-${index}`}\n            >\n              {example}\n            </Button>\n          ))}\n        </div>\n\n        <Button\n          onClick={handleSubmit}\n          disabled={!prompt.trim() || isGenerating}\n          className=\"gap-2\"\n          size=\"lg\"\n          data-testid=\"button-generate-schema\"\n        >\n          {isGenerating ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              Generating...\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"h-4 w-4\" />\n              Generate Schema\n            </>\n          )}\n        </Button>\n      </div>\n\n      <p className=\"text-xs text-muted-foreground\">\n        Tip: Press <kbd className=\"px-1.5 py-0.5 bg-muted rounded text-xs\">Cmd/Ctrl + Enter</kbd> to generate\n      </p>\n    </motion.div>\n  );\n}\n","size_bytes":3245},"client/src/components/app-sidebar.tsx":{"content":"import { Database, FileText, FolderOpen, Sparkles, Settings, Container, LogIn, Shield, Wrench, Activity ,Mic,Github,Bot,Bird,Atom,AudioLines} from \"lucide-react\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  \n} from \"@/components/ui/sidebar\";\nimport { useLocation } from \"wouter\";\n\n\n\nconst navItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: FolderOpen,\n  },\n  {\n    title: \"New Schema\",\n    url: \"/new\",\n    icon: Sparkles,\n  },\n \n  {\n    title: \"Exports\",\n    url: \"/exports\",\n    icon: FileText,\n  },\n  {\n    title: \"Docker Export\",\n    url: \"/docker-export\",\n    icon: Container,\n  },\n  {\n  title:\"Voice Chat\",\n  url:\"/voice-chat\",\n  icon:Mic\n },\n {\n  title:\"devops-chat\",\n  url:\"/devops-chat\",\n  icon:AudioLines\n },\n {\n  title:\"Ui Builder\",\n  url:\"/ui-builder\",\n  icon:Bot\n },\n {\n  title:\"database-chat\",\n  url:\"/database-chat\",\n  icon:Atom\n },\n {\n  title:\"gen-ai\",\n  url:\"/gen-chat\",\nicon:Bird\n },\n \n {\n  title:\"kubernetes-export\",\n  url:\"/kubernetes-export\",\n  icon:Container\n },\n {\n  title:\"Migration Safety\",\n  url:\"/migration-safety\",\n  icon:Shield\n },\n {\n  title:\"CI/CD Debug\",\n  url:\"/cicd-debug\",\n  icon:Wrench\n },\n {\n  title:\"Infra Drift Guardian\",\n  url:\"/infra-drift\",\n  icon:Activity\n },\n \n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-primary\">\n            <Database className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold\">AI Db_Designer</h2>\n            <p className=\"text-xs text-muted-foreground\">Schema Builder</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase().replace(\" \", \"-\")}`}\n                  >\n                    <a href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton data-testid=\"button-settings\">\n              <Settings className=\"h-4 w-4\" />\n              <span>Settings</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":3157},"client/src/components/empty-state.tsx":{"content":"import { Database, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\n\ninterface EmptyStateProps {\n  title: string;\n  description: string;\n  actionLabel?: string;\n  onAction?: () => void;\n  icon?: \"database\" | \"sparkles\";\n}\n\nexport function EmptyState({\n  title,\n  description,\n  actionLabel,\n  onAction,\n  icon = \"database\",\n}: EmptyStateProps) {\n  const Icon = icon === \"database\" ? Database : Sparkles;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.4 }}\n      className=\"flex flex-col items-center justify-center py-16 px-4\"\n    >\n      <div className=\"rounded-2xl border-2 border-dashed border-border bg-card/50 backdrop-blur-sm p-8 max-w-md w-full text-center space-y-6\">\n        <div className=\"flex justify-center\">\n          <div className=\"rounded-full bg-primary/10 p-6\">\n            <Icon className=\"h-12 w-12 text-primary\" />\n          </div>\n        </div>\n        <div className=\"space-y-2\">\n          <h3 className=\"text-xl font-semibold\" data-testid=\"text-empty-title\">{title}</h3>\n          <p className=\"text-muted-foreground\" data-testid=\"text-empty-description\">{description}</p>\n        </div>\n        {actionLabel && onAction && (\n          <Button onClick={onAction} size=\"lg\" className=\"gap-2\" data-testid=\"button-empty-action\">\n            <Sparkles className=\"h-4 w-4\" />\n            {actionLabel}\n          </Button>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":1562},"client/src/components/er-diagram.tsx":{"content":"import { useCallback } from \"react\";\nimport {\n  ReactFlow,\n  Background,\n  Controls,\n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  type Connection,\n  type Node,\n  type Edge,\n} from \"@xyflow/react\";\nimport \"@xyflow/react/dist/style.css\";\nimport { motion } from \"framer-motion\";\n\ninterface ERDiagramProps {\n  initialNodes?: Node[];\n  initialEdges?: Edge[];\n}\n\nconst defaultNodes: Node[] = [\n  {\n    id: \"1\",\n    type: \"default\",\n    data: { label: \"Users\\n• id: UUID\\n• email: String\\n• name: String\" },\n    position: { x: 100, y: 100 },\n    style: {\n      background: \"hsl(var(--card))\",\n      border: \"2px solid hsl(var(--primary))\",\n      borderRadius: \"8px\",\n      padding: \"12px\",\n      fontSize: \"12px\",\n      fontFamily: \"var(--font-mono)\",\n      width: 200,\n    },\n  },\n  {\n    id: \"2\",\n    type: \"default\",\n    data: { label: \"Posts\\n• id: UUID\\n• userId: UUID\\n• title: String\\n• content: Text\" },\n    position: { x: 400, y: 100 },\n    style: {\n      background: \"hsl(var(--card))\",\n      border: \"2px solid hsl(var(--accent))\",\n      borderRadius: \"8px\",\n      padding: \"12px\",\n      fontSize: \"12px\",\n      fontFamily: \"var(--font-mono)\",\n      width: 200,\n    },\n  },\n];\n\nconst defaultEdges: Edge[] = [\n  {\n    id: \"e1-2\",\n    source: \"1\",\n    target: \"2\",\n    label: \"has many\",\n    type: \"smoothstep\",\n    style: { stroke: \"hsl(var(--primary))\", strokeWidth: 2 },\n    labelStyle: { fill: \"hsl(var(--foreground))\", fontSize: 10 },\n  },\n];\n\nexport function ERDiagram({ initialNodes = defaultNodes, initialEdges = defaultEdges }: ERDiagramProps) {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  const onConnect = useCallback(\n    (params: Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.4 }}\n      className=\"h-[600px] w-full rounded-2xl border border-card-border bg-background/50 backdrop-blur-xl overflow-hidden\"\n      data-testid=\"container-er-diagram\"\n    >\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        fitView\n      >\n        <Background />\n        <Controls />\n        <MiniMap\n          nodeColor={(node) => {\n            return \"hsl(var(--primary))\";\n          }}\n          style={{\n            background: \"hsl(var(--card))\",\n            border: \"1px solid hsl(var(--border))\",\n          }}\n        />\n      </ReactFlow>\n    </motion.div>\n  );\n}\n","size_bytes":2671},"client/src/components/project-card.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Database, MoreVertical } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface ProjectCardProps {\n  id: string;\n  title: string;\n  description: string;\n  databaseType: \"PostgreSQL\" | \"MongoDB\" | \"MySQL\";\n  createdAt: string;\n  tableCount: number;\n  onEdit?: () => void;\n  onExport?: () => void;\n  onDelete?: () => void;\n}\n\nconst dbTypeColors = {\n  PostgreSQL: \"bg-blue-500/10 text-blue-600 dark:text-blue-400\",\n  MongoDB: \"bg-green-500/10 text-green-600 dark:text-green-400\",\n  MySQL: \"bg-orange-500/10 text-orange-600 dark:text-orange-400\",\n};\n\nexport function ProjectCard({\n  title,\n  description,\n  databaseType,\n  createdAt,\n  tableCount,\n  onEdit,\n  onExport,\n  onDelete,\n}: ProjectCardProps) {\n  return (\n    <motion.div\n      whileHover={{ y: -4 }}\n      transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n    >\n      <Card className=\"overflow-hidden border-card-border bg-card/80 backdrop-blur-xl hover-elevate\" data-testid={`card-project-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n        <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-lg font-semibold truncate\" data-testid=\"text-project-title\">\n              {title}\n            </h3>\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n              {description}\n            </p>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-project-menu\">\n                <MoreVertical className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={onEdit} data-testid=\"button-edit-project\">\n                Edit Schema\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onExport} data-testid=\"button-export-project\">\n                Export\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onDelete} className=\"text-destructive\" data-testid=\"button-delete-project\">\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </CardHeader>\n        <CardContent className=\"pb-3\">\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Database className=\"h-4 w-4\" />\n              <span>{tableCount} tables</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>{createdAt}</span>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter className=\"pt-3 border-t border-card-border\">\n          <Badge className={`${dbTypeColors[databaseType]} border-0`} data-testid=\"badge-database-type\">\n            {databaseType}\n          </Badge>\n        </CardFooter>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":3383},"client/src/components/schema-output.tsx":{"content":"  /* import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Download, Check, Lightbulb, Code as CodeIcon, FileCode } from \"lucide-react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\n export interface SchemaOutputProps {\n  schemas: {\n     sql: \"CREATE TABLE ...\",\n    mysql: \"CREATE TABLE ...\",\n    sqlite: \"\",\n    oracle: \"\",\n    sqlserver: \"\",\n    prisma: \"\",\n    typeorm: \"\",\n    mongoose: \"\",\n    sequelize: \"\",\n    language?: string;\n    extension?: string;\n   label?: string;\n    \n  };\n  explanation: string;\n  normalizationSuggestions?: string;\n  queryExamples?: Array<{ name: string; description: string; query: string }>;\n  migrationScript?: string;\n  dockerfile?: string;\n  dockerCompose?: string;\n  \n}\n\nexport function SchemaOutput({\n  schemas,\n  explanation,\n  normalizationSuggestions,\n  queryExamples,\n  migrationScript,\n  dockerfile,\n  dockerCompose,\n}: SchemaOutputProps) {\n  const [activeTab, setActiveTab] = useState(\"sql\");\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n   const schemaOptions = {\n    sql: { code: schemas.sql, language: \"sql\", label: \"PostgreSQL\", extension: \"sql\" },\n    mysql: { code: schemas.mysql, language: \"mysql\", label: \"MySQL\", extension: \"sql\" },\n    sqlite: { code: schemas.sqlite, language: \"sqllite\", label: \"SQLite\", extension: \"sql\" },\n    oracle: { code: schemas.oracle, language: \"oracle\", label: \"Oracle\", extension: \"sql\" },\n    sqlserver: { code: schemas.sqlserver, language: \"sqlserver\", label: \"SQL Server\", extension: \"sql\" },\n    prisma: { code: schemas.prisma, language: \"typescript\", label: \"Prisma\", extension: \"prisma\" },\n    typeorm: { code: schemas.typeorm, language: \"typescript\", label: \"TypeORM\", extension: \"ts\" },\n    mongoose: { code: schemas.mongoose, language: \"javascript\", label: \"Mongoose\", extension: \"js\" },\n    sequelize: { code: schemas.sequelize, language: \"javascript\", label: \"Sequelize\", extension: \"js\" },\n  };\n\n  const handleCopy = () => {\n    const currentSchema = schemaOptions[activeTab as keyof typeof schemaOptions];\n    navigator.clipboard.writeText(currentSchema.code);\n    setCopied(true);\n    toast({\n      title: \"Copied to clipboard\",\n      description: `${currentSchema.label} schema copied successfully`,\n    });\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleDownload = () => {\n    const currentSchema = schemaOptions[activeTab as keyof typeof schemaOptions];\n    const blob = new Blob([currentSchema.code], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `schema.${currentSchema.extension}`;\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({\n      title: \"Downloaded\",\n      description: `Schema downloaded as ${a.download}`,\n    });\n  };\n\n  const exportAsJSON = () => {\n    const data = JSON.stringify({ schemas, explanation, normalizationSuggestions, queryExamples, migrationScript }, null, 2);\n    const blob = new Blob([data], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"schema.json\";\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Exported as JSON\", description: \"Schema exported successfully\" });\n  };\n\n  const exportAsYAML = () => {\n    const yaml = Object.entries(schemas).map(([key, value]) => `${key}:\\n  ${value.split('\\n').join('\\n  ')}`).join('\\n\\n');\n    const blob = new Blob([yaml], { type: \"text/yaml\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"schema.yaml\";\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Exported as YAML\", description: \"Schema exported successfully\" });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4, delay: 0.1 }}\n      className=\"space-y-4\"\n    >\n      <div className=\"rounded-2xl border border-card-border bg-card/80 backdrop-blur-xl p-6 space-y-4\">\n        <div className=\"flex items-center justify-between flex-wrap gap-2\">\n          <h3 className=\"text-xl font-semibold\">Generated Schema</h3>\n          <div className=\"flex gap-2 flex-wrap\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleCopy}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n              data-testid=\"button-copy-schema\"\n            >\n              {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              {copied ? \"Copied\" : \"Copy\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleDownload}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n              data-testid=\"button-download-schema\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Download\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportAsJSON}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n            >\n              <FileCode className=\"h-4 w-4\" />\n              JSON\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportAsYAML}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n            >\n              <FileCode className=\"h-4 w-4\" />\n              YAML\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-9\" data-testid=\"tabs-schema-type\">\n            <TabsTrigger value=\"sql\">PostgreSQL</TabsTrigger>\n            <TabsTrigger value=\"mysql\">MySQL</TabsTrigger>\n            <TabsTrigger value=\"sqlite\">SQLite</TabsTrigger>\n            <TabsTrigger value=\"oracle\">Oracle</TabsTrigger>\n            <TabsTrigger value=\"sqlserver\">SQL Server</TabsTrigger>\n            <TabsTrigger value=\"prisma\">Prisma</TabsTrigger>\n            <TabsTrigger value=\"typeorm\">TypeORM</TabsTrigger>\n            <TabsTrigger value=\"mongoose\">Mongoose</TabsTrigger>\n            <TabsTrigger value=\"sequelize\">Sequelize</TabsTrigger>\n          </TabsList>\n          {Object.entries(schemaOptions).map(([key, { code, language }]) => (\n            <TabsContent key={key} value={key} className=\"mt-4\">\n              <div className=\"rounded-lg overflow-hidden border border-border\">\n                <SyntaxHighlighter\n                  language={language}\n                  style={vscDarkPlus}\n                  customStyle={{\n                    margin: 0,\n                    borderRadius: 0,\n                    fontSize: \"0.875rem\",\n                    maxHeight: \"400px\",\n                  }}\n                  data-testid=\"code-schema-output\"\n                >\n                  {code}\n                </SyntaxHighlighter>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n\n      <div className=\"rounded-2xl border border-card-border bg-card/80 backdrop-blur-xl p-6\">\n        <h4 className=\"text-lg font-semibold mb-3\">AI Explanation</h4>\n        <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-schema-explanation\">\n          {explanation}\n        </p>\n      </div>\n\n      {normalizationSuggestions && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lightbulb className=\"h-5 w-5 text-primary\" />\n              Normalization Suggestions\n            </CardTitle>\n            <CardDescription>AI-powered optimization recommendations</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{normalizationSuggestions}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {queryExamples && queryExamples.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CodeIcon className=\"h-5 w-5 text-primary\" />\n              Common Query Examples\n            </CardTitle>\n            <CardDescription>Pre-generated queries for common operations</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {queryExamples.map((example, index) => (\n                <AccordionItem key={index} value={`query-${index}`}>\n                  <AccordionTrigger>{example.name}</AccordionTrigger>\n                  <AccordionContent>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{example.description}</p>\n                    <div className=\"rounded-lg overflow-hidden border border-border\">\n                      <SyntaxHighlighter language=\"sql\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                        {example.query}\n                      </SyntaxHighlighter>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </CardContent>\n        </Card>\n      )}\n\n      {migrationScript && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Migration Script</CardTitle>\n            <CardDescription>Script to migrate or alter your database</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-lg overflow-hidden border border-border\">\n              <SyntaxHighlighter language=\"sql\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                {migrationScript}\n              </SyntaxHighlighter>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {dockerfile && dockerCompose && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Docker Configuration</CardTitle>\n            <CardDescription>Ready-to-use Docker setup for instant deployment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"dockerfile\">\n              <TabsList>\n                <TabsTrigger value=\"dockerfile\">Dockerfile</TabsTrigger>\n                <TabsTrigger value=\"compose\">docker-compose.yml</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"dockerfile\" className=\"mt-4\">\n                <div className=\"rounded-lg overflow-hidden border border-border\">\n                  <SyntaxHighlighter language=\"docker\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                    {dockerfile}\n                  </SyntaxHighlighter>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"compose\" className=\"mt-4\">\n                <div className=\"rounded-lg overflow-hidden border border-border\">\n                  <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                    {dockerCompose}\n                  </SyntaxHighlighter>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </motion.div>\n  );\n}\n\n; */\n\nimport { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Download, Check, Lightbulb, Code as CodeIcon, FileCode } from \"lucide-react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport interface SchemaOutputProps {\n  schemas: {\n    sql: string;\n    mysql: string;\n    sqlite: string;\n    oracle: string;\n    sqlserver: string;\n    prisma: string;\n    typeorm: string;\n    mongoose: string;\n    sequelize: string;\n  };\n  explanation: string;\n  normalizationSuggestions?: string;\n  queryExamples?: Array<{ name: string; description: string; query: string }>;\n  migrationScript?: string;\n  dockerfile?: string;\n  dockerCompose?: string;\n}\n\nexport function SchemaOutput({\n  schemas = {\n    sql: \"\",\n    mysql: \"\",\n    sqlite: \"\",\n    oracle: \"\",\n    sqlserver: \"\",\n    prisma: \"\",\n    typeorm: \"\",\n    mongoose: \"\",\n    sequelize: \"\",\n  },\n  explanation,\n  normalizationSuggestions,\n  queryExamples,\n  migrationScript,\n  dockerfile,\n  dockerCompose,\n}: SchemaOutputProps) {\n  const [activeTab, setActiveTab] = useState(\"sql\");\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const schemaOptions = {\n    sql: { code: schemas.sql, language: \"sql\", label: \"PostgreSQL\", extension: \"sql\" },\n    mysql: { code: schemas.mysql, language: \"mysql\", label: \"MySQL\", extension: \"sql\" },\n    sqlite: { code: schemas.sqlite, language: \"sql\", label: \"SQLite\", extension: \"sql\" },\n    oracle: { code: schemas.oracle, language: \"sql\", label: \"Oracle\", extension: \"sql\" },\n    sqlserver: { code: schemas.sqlserver, language: \"sql\", label: \"SQL Server\", extension: \"sql\" },\n    prisma: { code: schemas.prisma, language: \"typescript\", label: \"Prisma\", extension: \"prisma\" },\n    typeorm: { code: schemas.typeorm, language: \"typescript\", label: \"TypeORM\", extension: \"ts\" },\n    mongoose: { code: schemas.mongoose, language: \"javascript\", label: \"Mongoose\", extension: \"js\" },\n    sequelize: { code: schemas.sequelize, language: \"javascript\", label: \"Sequelize\", extension: \"js\" },\n  };\n\n  const handleCopy = () => {\n    const currentSchema = schemaOptions[activeTab as keyof typeof schemaOptions];\n    navigator.clipboard.writeText(currentSchema.code || \"\");\n    setCopied(true);\n    toast({\n      title: \"Copied to clipboard\",\n      description: `${currentSchema.label} schema copied successfully`,\n    });\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleDownload = () => {\n    const currentSchema = schemaOptions[activeTab as keyof typeof schemaOptions];\n    const blob = new Blob([currentSchema.code || \"\"], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `schema.${currentSchema.extension}`;\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({\n      title: \"Downloaded\",\n      description: `Schema downloaded as ${a.download}`,\n    });\n  };\n\n  const exportAsJSON = () => {\n    const data = JSON.stringify({ schemas, explanation, normalizationSuggestions, queryExamples, migrationScript }, null, 2);\n    const blob = new Blob([data], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"schema.json\";\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Exported as JSON\", description: \"Schema exported successfully\" });\n  };\n\n  const exportAsYAML = () => {\n    const yaml = Object.entries(schemas)\n      .map(([key, value]) => `${key}:\\n  ${(value || \"\").split(\"\\n\").join(\"\\n  \")}`)\n      .join(\"\\n\\n\");\n    const blob = new Blob([yaml], { type: \"text/yaml\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"schema.yaml\";\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Exported as YAML\", description: \"Schema exported successfully\" });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4, delay: 0.1 }}\n      className=\"space-y-4\"\n    >\n      <div className=\"rounded-2xl border border-card-border bg-card/80 backdrop-blur-xl p-6 space-y-4\">\n        <div className=\"flex items-center justify-between flex-wrap gap-2\">\n          <h3 className=\"text-xl font-semibold\">Generated Schema</h3>\n          <div className=\"flex gap-2 flex-wrap\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleCopy}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n              data-testid=\"button-copy-schema\"\n            >\n              {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              {copied ? \"Copied\" : \"Copy\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleDownload}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n              data-testid=\"button-download-schema\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Download\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportAsJSON}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n            >\n              <FileCode className=\"h-4 w-4\" />\n              JSON\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={exportAsYAML}\n              className=\"gap-2 hover-elevate active-elevate-2\"\n            >\n              <FileCode className=\"h-4 w-4\" />\n              YAML\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-9\" data-testid=\"tabs-schema-type\">\n            <TabsTrigger value=\"sql\">PostgreSQL</TabsTrigger>\n            <TabsTrigger value=\"mysql\">MySQL</TabsTrigger>\n            <TabsTrigger value=\"sqlite\">SQLite</TabsTrigger>\n            <TabsTrigger value=\"oracle\">Oracle</TabsTrigger>\n            <TabsTrigger value=\"sqlserver\">SQL Server</TabsTrigger>\n            <TabsTrigger value=\"prisma\">Prisma</TabsTrigger>\n            <TabsTrigger value=\"typeorm\">TypeORM</TabsTrigger>\n            <TabsTrigger value=\"mongoose\">Mongoose</TabsTrigger>\n            <TabsTrigger value=\"sequelize\">Sequelize</TabsTrigger>\n          </TabsList>\n          {Object.entries(schemaOptions).map(([key, { code, language }]) => (\n            <TabsContent key={key} value={key} className=\"mt-4\">\n              <div className=\"rounded-lg overflow-hidden border border-border\">\n                <SyntaxHighlighter\n                  language={language}\n                  style={vscDarkPlus}\n                  customStyle={{\n                    margin: 0,\n                    borderRadius: 0,\n                    fontSize: \"0.875rem\",\n                    maxHeight: \"400px\",\n                  }}\n                  data-testid=\"code-schema-output\"\n                >\n                  {code}\n                </SyntaxHighlighter>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n\n      <div className=\"rounded-2xl border border-card-border bg-card/80 backdrop-blur-xl p-6\">\n        <h4 className=\"text-lg font-semibold mb-3\">AI Explanation</h4>\n        <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-schema-explanation\">\n          {explanation}\n        </p>\n      </div>\n\n      {normalizationSuggestions && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lightbulb className=\"h-5 w-5 text-primary\" />\n              Normalization Suggestions\n            </CardTitle>\n            <CardDescription>AI-powered optimization recommendations</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{normalizationSuggestions}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {queryExamples && queryExamples.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CodeIcon className=\"h-5 w-5 text-primary\" />\n              Common Query Examples\n            </CardTitle>\n            <CardDescription>Pre-generated queries for common operations</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {queryExamples.map((example, index) => (\n                <AccordionItem key={index} value={`query-${index}`}>\n                  <AccordionTrigger>{example.name}</AccordionTrigger>\n                  <AccordionContent>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{example.description}</p>\n                    <div className=\"rounded-lg overflow-hidden border border-border\">\n                      <SyntaxHighlighter language=\"sql\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                        {example.query}\n                      </SyntaxHighlighter>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </CardContent>\n        </Card>\n      )}\n\n      {migrationScript && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Migration Script</CardTitle>\n            <CardDescription>Script to migrate or alter your database</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-lg overflow-hidden border border-border\">\n              <SyntaxHighlighter language=\"sql\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                {migrationScript}\n              </SyntaxHighlighter>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {dockerfile && dockerCompose && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Docker Configuration</CardTitle>\n            <CardDescription>Ready-to-use Docker setup for instant deployment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"dockerfile\">\n              <TabsList>\n                <TabsTrigger value=\"dockerfile\">Dockerfile</TabsTrigger>\n                <TabsTrigger value=\"compose\">docker-compose.yml</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"dockerfile\" className=\"mt-4\">\n                <div className=\"rounded-lg overflow-hidden border border-border\">\n                  <SyntaxHighlighter language=\"docker\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                    {dockerfile}\n                  </SyntaxHighlighter>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"compose\" className=\"mt-4\">\n                <div className=\"rounded-lg overflow-hidden border border-border\">\n                  <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} customStyle={{ margin: 0, fontSize: \"0.875rem\" }}>\n                    {dockerCompose}\n                  </SyntaxHighlighter>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </motion.div>\n  );\n}\n\n","size_bytes":23654},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"ai-db-designer-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1376},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate active-elevate-2\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":715},"client/src/components/voice-agent.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Mic, MicOff, Volume2, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoiceAgentProps {\n  onTranscript?: (text: string) => void;\n  apiEndpoint: string;\n  title?: string;\n}\n\nexport function VoiceAgent({ onTranscript, apiEndpoint, title = \"Voice Assistant\" }: VoiceAgentProps) {\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const recognitionRef = useRef<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n\n      recognitionRef.current.onresult = (event: any) => {\n        const current = event.resultIndex;\n        const transcriptText = event.results[current][0].transcript;\n        \n        if (event.results[current].isFinal) {\n          setTranscript(transcriptText);\n          onTranscript?.(transcriptText);\n          handleSendMessage(transcriptText);\n        }\n      };\n\n      recognitionRef.current.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n        toast({\n          title: \"Voice Recognition Error\",\n          description: \"There was an error with voice recognition. Please try again.\",\n          variant: \"destructive\",\n        });\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n\n  const handleSendMessage = async (message: string) => {\n    if (!message.trim()) return;\n\n    setIsProcessing(true);\n    try {\n      const res = await fetch(apiEndpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to get response\");\n      }\n\n      const data = await res.json();\n      setResponse(data.response);\n      \n      speakText(data.response);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to process your message. Please check if API key is configured.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const speakText = (text: string) => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      \n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n\n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onerror = () => setIsSpeaking(false);\n\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n\n  const toggleListening = () => {\n    if (isListening) {\n      recognitionRef.current?.stop();\n      setIsListening(false);\n    } else {\n      if (!recognitionRef.current) {\n        toast({\n          title: \"Not Supported\",\n          description: \"Voice recognition is not supported in your browser.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setTranscript(\"\");\n      setResponse(\"\");\n      recognitionRef.current?.start();\n      setIsListening(true);\n      toast({\n        title: \"Listening...\",\n        description: \"Speak now to ask your question.\",\n      });\n    }\n  };\n\n  const stopSpeaking = () => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  return (\n    <Card className=\"p-6 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold\">{title}</h3>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={toggleListening}\n            variant={isListening ? \"destructive\" : \"default\"}\n            size=\"lg\"\n            className=\"gap-2\"\n            disabled={isProcessing}\n          >\n            {isListening ? (\n              <>\n                <MicOff className=\"h-5 w-5\" />\n                Stop Listening\n              </>\n            ) : (\n              <>\n                <Mic className=\"h-5 w-5\" />\n                Start Voice Chat\n              </>\n            )}\n          </Button>\n          \n          {isSpeaking && (\n            <Button\n              onClick={stopSpeaking}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"gap-2\"\n            >\n              <Volume2 className=\"h-5 w-5\" />\n              Stop Speaking\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {isProcessing && (\n        <div className=\"flex items-center gap-2 text-muted-foreground\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span>Processing your question...</span>\n        </div>\n      )}\n\n      {transcript && (\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium text-muted-foreground\">You said:</p>\n          <div className=\"p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm\">{transcript}</p>\n          </div>\n        </div>\n      )}\n\n      {response && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Response:</p>\n            {isSpeaking && (\n              <span className=\"flex items-center gap-1 text-xs text-primary\">\n                <Volume2 className=\"h-3 w-3 animate-pulse\" />\n                Speaking...\n              </span>\n            )}\n          </div>\n          <div className=\"p-4 bg-primary/5 rounded-lg border border-primary/20\">\n            <p className=\"text-sm whitespace-pre-wrap\">{response}</p>\n          </div>\n        </div>\n      )}\n\n      {isListening && (\n        <div className=\"flex items-center justify-center gap-2 text-primary\">\n          <Mic className=\"h-5 w-5 animate-pulse\" />\n          <span className=\"text-sm font-medium\">Listening...</span>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6671},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/schema-to-diagram.ts":{"content":"import type { Node, Edge } from \"@xyflow/react\";\n\ninterface TableInfo {\n  name: string;\n  fields: string[];\n  foreignKeys: { field: string; references: string }[];\n}\n\nexport function parseSQLSchema(sql: string): TableInfo[] {\n  const tables: TableInfo[] = [];\n  \n  // Match CREATE TABLE statements\n  const tableRegex = /CREATE\\s+TABLE\\s+(\\w+)\\s*\\(([\\s\\S]*?)\\);/gi;\n  let match;\n  \n  while ((match = tableRegex.exec(sql)) !== null) {\n    const tableName = match[1];\n    const tableBody = match[2];\n    \n    const fields: string[] = [];\n    const foreignKeys: { field: string; references: string }[] = [];\n    \n    // Parse fields\n    const lines = tableBody.split(',').map(l => l.trim());\n    \n    for (const line of lines) {\n      // Skip constraint definitions\n      if (line.toUpperCase().startsWith('CONSTRAINT') || \n          line.toUpperCase().startsWith('PRIMARY KEY') ||\n          line.toUpperCase().startsWith('UNIQUE') ||\n          line.toUpperCase().startsWith('CHECK') ||\n          line.toUpperCase().startsWith('INDEX')) {\n        continue;\n      }\n      \n      // Check for foreign key\n      const fkMatch = line.match(/FOREIGN\\s+KEY\\s*\\((\\w+)\\)\\s*REFERENCES\\s+(\\w+)/i);\n      if (fkMatch) {\n        foreignKeys.push({\n          field: fkMatch[1],\n          references: fkMatch[2]\n        });\n        continue;\n      }\n      \n      // Regular field\n      const fieldMatch = line.match(/^(\\w+)\\s+([A-Z0-9()]+)/i);\n      if (fieldMatch) {\n        const fieldName = fieldMatch[1];\n        const fieldType = fieldMatch[2];\n        const isPrimary = line.toUpperCase().includes('PRIMARY KEY');\n        const isUnique = line.toUpperCase().includes('UNIQUE');\n        const isNotNull = line.toUpperCase().includes('NOT NULL');\n        \n        let fieldStr = `${fieldName}: ${fieldType}`;\n        if (isPrimary) fieldStr = `🔑 ${fieldStr}`;\n        else if (isUnique) fieldStr = `⭐ ${fieldStr}`;\n        \n        fields.push(fieldStr);\n      }\n    }\n    \n    tables.push({ name: tableName, fields, foreignKeys });\n  }\n  \n  return tables;\n}\n\nexport function schemaToNodesAndEdges(sql: string): { nodes: Node[]; edges: Edge[] } {\n  const tables = parseSQLSchema(sql);\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n  \n  // Create nodes in a grid layout\n  const itemsPerRow = 3;\n  const horizontalSpacing = 280;\n  const verticalSpacing = 220;\n  \n  tables.forEach((table, index) => {\n    const row = Math.floor(index / itemsPerRow);\n    const col = index % itemsPerRow;\n    \n    const label = `${table.name}\\n${table.fields.join('\\n')}`;\n    \n    nodes.push({\n      id: table.name,\n      type: \"default\",\n      data: { label },\n      position: { \n        x: col * horizontalSpacing + 100, \n        y: row * verticalSpacing + 100 \n      },\n      style: {\n        background: \"hsl(var(--card))\",\n        border: \"2px solid hsl(var(--primary))\",\n        borderRadius: \"8px\",\n        padding: \"12px\",\n        fontSize: \"12px\",\n        fontFamily: \"var(--font-mono)\",\n        minWidth: 220,\n        whiteSpace: \"pre-line\",\n      },\n    });\n    \n    // Create edges for foreign keys\n    table.foreignKeys.forEach((fk, fkIndex) => {\n      edges.push({\n        id: `${table.name}-${fk.references}-${fkIndex}`,\n        source: table.name,\n        target: fk.references,\n        label: fk.field,\n        type: \"smoothstep\",\n        style: { stroke: \"hsl(var(--primary))\", strokeWidth: 2 },\n        labelStyle: { fill: \"hsl(var(--foreground))\", fontSize: 10 },\n        animated: true,\n      });\n    });\n  });\n  \n  return { nodes, edges };\n}\n","size_bytes":3545},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Collab.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface CollaborationMessage {\n  type: \"join\" | \"leave\" | \"cursor\" | \"update\" | \"heartbeat\" \n        | \"user-joined\" | \"user-left\" | \"joined\" | \"cursor-update\" | \"schema-update\";\n  projectId?: string;\n  userId?: string;\n  username?: string;\n  data?: any;\n  sessionId?: string;\n  activeUsers?: { userId: string; username: string }[];\n  user?: { userId: string; username: string };\n  cursor?: any;\n  changes?: any;\n}\n\ninterface User {\n  userId: string;\n  username: string;\n}\n\nexport default function CollaborationPage() {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [activeUsers, setActiveUsers] = useState<User[]>([]);\n  const [schema, setSchema] = useState<string>(\"\"); // shared schema text\n  const [username, setUsername] = useState<string>(\"guest-\" + Math.floor(Math.random() * 1000));\n  const [projectId] = useState<string>(\"demo-project\"); // static project for now\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    const ws = new WebSocket(`ws://localhost:3000/ws/collaborate`);\n    setSocket(ws);\n\n    ws.onopen = () => {\n      setConnected(true);\n      ws.send(JSON.stringify({\n        type: \"join\",\n        projectId,\n        userId: crypto.randomUUID(),\n        username,\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      const message: CollaborationMessage = JSON.parse(event.data);\n      handleMessage(message);\n    };\n\n    ws.onclose = () => {\n      setConnected(false);\n      console.log(\"Disconnected from collaboration server\");\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [projectId, username]);\n\n  // keep heartbeats alive\n  useEffect(() => {\n    if (!socket) return;\n    const interval = setInterval(() => {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.send(JSON.stringify({\n          type: \"heartbeat\",\n          projectId,\n          userId: username,\n          data: { cursor: textareaRef.current?.selectionStart ?? 0 }\n        }));\n      }\n    }, 15000);\n    return () => clearInterval(interval);\n  }, [socket]);\n\n  const handleMessage = (msg: CollaborationMessage) => {\n    switch (msg.type) {\n      case \"joined\":\n        setActiveUsers(msg.activeUsers || []);\n        break;\n      case \"user-joined\":\n        setActiveUsers(msg.activeUsers || []);\n        break;\n      case \"user-left\":\n        setActiveUsers(prev => prev.filter(u => u.userId !== msg.user?.userId));\n        break;\n      case \"schema-update\":\n        setSchema(msg.changes || \"\");\n        break;\n    }\n  };\n\n  const handleSchemaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newText = e.target.value;\n    setSchema(newText);\n\n    socket?.send(JSON.stringify({\n      type: \"update\",\n      projectId,\n      userId: username,\n      username,\n      data: newText,\n    }));\n  };\n\n  return (\n    <div className=\"p-6 grid grid-cols-3 gap-6\">\n      <Card className=\"p-4 col-span-2\">\n        <h2 className=\"text-xl font-bold mb-2\">Collaborative Schema Editor</h2>\n        <Textarea\n          ref={textareaRef}\n          value={schema}\n          onChange={handleSchemaChange}\n          placeholder=\"Start editing the schema...\"\n          className=\"w-full h-[400px]\"\n        />\n      </Card>\n\n      <Card className=\"p-4\">\n        <h2 className=\"text-xl font-bold mb-2\">Active Users</h2>\n        <ScrollArea className=\"h-[400px]\">\n          <ul>\n            {activeUsers.map((u) => (\n              <li key={u.userId} className=\"p-2 border-b\">{u.username}</li>\n            ))}\n          </ul>\n        </ScrollArea>\n        <div className=\"mt-4\">\n          {connected ? (\n            <Button variant=\"secondary\" onClick={() => socket?.close()}>\n              Disconnect\n            </Button>\n          ) : (\n            <Button disabled>Connecting...</Button>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4182},"client/src/pages/Database-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport default function DatabaseAdvisorChatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content: \"Hello! I'm your Database Advisor. Ask me anything about database design, schema optimization, indexing, query performance, normalization, and best practices!\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages((prev) => [...prev, { role: \"user\", content: userMessage }]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/database-chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMessage }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to get response\");\n      }\n\n      const data = await response.json();\n      setMessages((prev) => [\n        ...prev,\n        { role: \"assistant\", content: data.response },\n      ]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to get response from chatbot\",\n        variant: \"destructive\",\n      });\n      setMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"I'm sorry, I encountered an error. Please check your API configuration.\",\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-5xl h-[calc(100vh-8rem)]\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Bot className=\"h-8 w-8 text-primary\" />\n          Database Advisor Chatbot\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Get expert guidance on database design, optimization, queries, and best practices.\n        </p>\n      </div>\n\n      <Card className=\"flex flex-col h-[calc(100%-8rem)]\">\n        <ScrollArea className=\"flex-1 p-4\" ref={scrollRef}>\n          <div className=\"space-y-4\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex gap-3 ${\n                  message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.role === \"assistant\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                    <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                )}\n                <div\n                  className={`rounded-lg px-4 py-2 max-w-[80%] ${\n                    message.role === \"user\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                </div>\n                {message.role === \"user\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-muted\">\n                    <User className=\"h-4 w-4\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                  <Bot className=\"h-4 w-4 text-primary-foreground animate-pulse\" />\n                </div>\n                <div className=\"rounded-lg px-4 py-2 bg-muted\">\n                  <p className=\"text-muted-foreground\">Thinking...</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t p-4\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Ask anything about databases... (Press Enter to send, Shift+Enter for new line)\"\n              className=\"min-h-[60px] resize-none\"\n              disabled={isLoading}\n            />\n            <Button\n              onClick={handleSend}\n              disabled={isLoading || !input.trim()}\n              size=\"icon\"\n              className=\"h-[60px] w-[60px]\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5496},"client/src/pages/Genai.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport default function DatabaseAdvisorChatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content: \"Hello! I'm your Genai Advisor . Ask me anything about Generative ai , langchain.js, vector embedding , rag, tool calling , prompt engineering !\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages((prev) => [...prev, { role: \"user\", content: userMessage }]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/gen-chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMessage }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to get response\");\n      }\n\n      const data = await response.json();\n      setMessages((prev) => [\n        ...prev,\n        { role: \"assistant\", content: data.response },\n      ]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to get response from chatbot\",\n        variant: \"destructive\",\n      });\n      setMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"I'm sorry, I encountered an error. Please check your API configuration.\",\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-5xl h-[calc(100vh-8rem)]\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Bot className=\"h-8 w-8 text-primary\" />\n          Gen ai Expert \n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Get expert guidance on Generative ai , langchain, Rag, Vector embeddings , prompt engineering and more...\n        </p>\n      </div>\n\n      <Card className=\"flex flex-col h-[calc(100%-8rem)]\">\n        <ScrollArea className=\"flex-1 p-4\" ref={scrollRef}>\n          <div className=\"space-y-4\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex gap-3 ${\n                  message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.role === \"assistant\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                    <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                )}\n                <div\n                  className={`rounded-lg px-4 py-2 max-w-[80%] ${\n                    message.role === \"user\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                </div>\n                {message.role === \"user\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-muted\">\n                    <User className=\"h-4 w-4\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                  <Bot className=\"h-4 w-4 text-primary-foreground animate-pulse\" />\n                </div>\n                <div className=\"rounded-lg px-4 py-2 bg-muted\">\n                  <p className=\"text-muted-foreground\">Thinking...</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t p-4\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Ask anything about databases... (Press Enter to send, Shift+Enter for new line)\"\n              className=\"min-h-[60px] resize-none\"\n              disabled={isLoading}\n            />\n            <Button\n              onClick={handleSend}\n              disabled={isLoading || !input.trim()}\n              size=\"icon\"\n              className=\"h-[60px] w-[60px]\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5490},"client/src/pages/Ui-generator.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n  type?: \"text\" | \"code\"; // extra type for code messages\n}\n\nexport default function UiGeneratorChatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content:\n        \"Hello! Paste your database schema here, and I'll generate UI component code (React + Tailwind) for it. For example: profile pages, forms, and dashboards.\",\n      type: \"text\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages((prev) => [\n      ...prev,\n      { role: \"user\", content: userMessage, type: \"text\" },\n    ]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/ui-builder\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMessage }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to get response\");\n      }\n\n      const data = await response.json();\n\n      setMessages((prev) => [\n        ...prev,\n        { role: \"assistant\", content: data.response, type: \"code\" },\n      ]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description:\n          error.message || \"Failed to get response from UI generator chatbot\",\n        variant: \"destructive\",\n      });\n      setMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content:\n            \"I'm sorry, I encountered an error. Please check your API configuration.\",\n          type: \"text\",\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl h-[calc(100vh-8rem)]\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Bot className=\"h-8 w-8 text-primary\" />\n          UI Generator Chatbot\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Generate React + Tailwind UI components automatically from your\n          database schema.\n        </p>\n      </div>\n\n      <Card className=\"flex flex-col h-[calc(100%-8rem)]\">\n        <ScrollArea className=\"flex-1 p-4\" ref={scrollRef}>\n          <div className=\"space-y-6\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex gap-3 ${\n                  message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.role === \"assistant\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                    <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                )}\n\n                {message.type === \"code\" ? (\n                  <pre className=\"bg-black text-green-400 rounded-lg px-4 py-4 text-sm overflow-x-auto overflow-y-auto max-w-full w-full max-h-[500px] whitespace-pre-wrap shadow-md border border-gray-700\">\n                    <code className=\"block\">{message.content}</code>\n                  </pre>\n                ) : (\n                  <div\n                    className={`rounded-lg px-4 py-2 max-w-[80%] ${\n                      message.role === \"user\"\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted\"\n                    }`}\n                  >\n                    <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                )}\n\n                {message.role === \"user\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-muted\">\n                    <User className=\"h-4 w-4\" />\n                  </div>\n                )}\n              </div>\n            ))}\n\n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                  <Bot className=\"h-4 w-4 text-primary-foreground animate-pulse\" />\n                </div>\n                <div className=\"rounded-lg px-4 py-2 bg-muted\">\n                  <p className=\"text-muted-foreground\">Generating UI code...</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t p-4\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Paste your database schema here... (Press Enter to send, Shift+Enter for new line)\"\n              className=\"min-h-[100px] resize-none\"\n              disabled={isLoading}\n            />\n            <Button\n              onClick={handleSend}\n              disabled={isLoading || !input.trim()}\n              size=\"icon\"\n              className=\"h-[60px] w-[60px]\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6103},"client/src/pages/ci-cddebug.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, AlertCircle, CheckCircle2, Code, Wrench } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface CICDDebugResult {\n  rootCause: string;\n  explanation: string;\n  suggestedFix: string;\n  fixedYaml?: string;\n  relatedIssues: string[];\n}\n\nexport default function CICDDebug() {\n  const [logs, setLogs] = useState(\"\");\n  const [pipelineYaml, setPipelineYaml] = useState(\"\");\n  const [result, setResult] = useState<CICDDebugResult | null>(null);\n\n  const debugMutation = useMutation({\n    mutationFn: async (data: { logs: string; pipelineYaml?: string }) => {\n      const response = await fetch(\"/api/debug-cicd\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to debug CI/CD pipeline\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n  });\n\n  const handleDebug = () => {\n    if (!logs.trim()) return;\n    debugMutation.mutate({ \n      logs, \n      pipelineYaml: pipelineYaml.trim() || undefined \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold flex items-center gap-2 mb-2\">\n            <Wrench className=\"h-8 w-8 md:h-10 md:w-10 text-primary\" />\n            CI/CD Debugging Copilot\n          </h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">\n            Debug pipeline failures with AI-powered analysis and fixes\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pipeline Logs</CardTitle>\n                <CardDescription>Paste your failing CI/CD pipeline logs</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"logs\">Error Logs (Required)</Label>\n                  <Textarea\n                    id=\"logs\"\n                    placeholder=\"Error: Cannot find module 'express'&#10;npm ERR! code ELIFECYCLE&#10;npm ERR! errno 1&#10;...\"\n                    value={logs}\n                    onChange={(e) => setLogs(e.target.value)}\n                    className=\"font-mono text-xs md:text-sm min-h-[200px] md:min-h-[250px]\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Pipeline Configuration (Optional)</CardTitle>\n                <CardDescription>Add your YAML config for better analysis</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"yaml\">YAML Configuration</Label>\n                  <Textarea\n                    id=\"yaml\"\n                    placeholder=\"name: CI Pipeline&#10;on: [push]&#10;jobs:&#10;  build:&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - uses: actions/checkout@v2&#10;      ...\"\n                    value={pipelineYaml}\n                    onChange={(e) => setPipelineYaml(e.target.value)}\n                    className=\"font-mono text-xs md:text-sm min-h-[150px] md:min-h-[200px]\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button\n              onClick={handleDebug}\n              disabled={!logs.trim() || debugMutation.isPending}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {debugMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Analyzing Pipeline...\n                </>\n              ) : (\n                <>\n                  <Wrench className=\"mr-2 h-4 w-4\" />\n                  Debug Pipeline\n                </>\n              )}\n            </Button>\n\n            {debugMutation.isError && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle>Error</AlertTitle>\n                <AlertDescription>\n                  {(debugMutation.error as Error).message}\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n\n          <div className=\"space-y-6\">\n            {result && (\n              <>\n                <Card className=\"border-red-500/50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-red-600\">\n                      <AlertCircle className=\"h-5 w-5\" />\n                      Root Cause\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"font-semibold text-sm md:text-base\">{result.rootCause}</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Explanation</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[200px] md:h-[250px]\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{result.explanation}</p>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-green-500/50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-green-600\">\n                      <CheckCircle2 className=\"h-5 w-5\" />\n                      Suggested Fix\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[250px] md:h-[300px]\">\n                      <div className=\"text-sm whitespace-pre-wrap\">{result.suggestedFix}</div>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n\n                {result.fixedYaml && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Code className=\"h-5 w-5\" />\n                        Fixed YAML Configuration\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[300px]\">\n                        <pre className=\"text-xs md:text-sm font-mono bg-muted p-4 rounded-lg overflow-x-auto\">\n                          {result.fixedYaml}\n                        </pre>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {result.relatedIssues.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Related Issues to Watch For</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[150px]\">\n                        <ul className=\"space-y-2\">\n                          {result.relatedIssues.map((issue, idx) => (\n                            <li key={idx} className=\"flex gap-2 text-sm\">\n                              <Badge variant=\"outline\" className=\"shrink-0\">\n                                {idx + 1}\n                              </Badge>\n                              <span>{issue}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            )}\n\n            {!result && !debugMutation.isPending && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"flex flex-col items-center justify-center py-16 md:py-24 text-center\">\n                  <Wrench className=\"h-16 w-16 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground text-sm md:text-base px-4\">\n                    Paste your pipeline logs and click \"Debug Pipeline\" to get AI-powered insights\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8946},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport { EmptyState } from \"@/components/empty-state\";\nimport { Sparkles, Search, Loader2 } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Project {\n  id: string;\n  title: string;\n  description: string;\n  databaseType: string;\n  createdAt: string;\n}\n\nexport default function Dashboard() {\n  const [, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadProjects();\n  }, []);\n\n  const loadProjects = async () => {\n    try {\n      const response = await fetch(\"/api/projects\");\n      if (!response.ok) throw new Error(\"Failed to load projects\");\n      const data = await response.json();\n      setProjects(data);\n    } catch (error) {\n     \n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    try {\n      const response = await fetch(`/api/projects/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete project\");\n      \n      setProjects(projects.filter(p => p.id !== id));\n      toast({\n        title: \"Project deleted\",\n        description: \"The project has been removed successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Delete failed\",\n        description: \"Could not delete the project\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return \"today\";\n    if (diffDays === 1) return \"yesterday\";\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return date.toLocaleDateString();\n  };\n\n  const filteredProjects = projects.filter((project) =>\n    project.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    project.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-6 lg:p-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"max-w-7xl mx-auto space-y-8\"\n      >\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Your Projects</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Manage and organize your database schemas\n            </p>\n          </div>\n          <Button\n            size=\"lg\"\n            className=\"gap-2\"\n            onClick={() => navigate(\"/new\")}\n            data-testid=\"button-new-schema\"\n          >\n            <Sparkles className=\"h-4 w-4\" />\n            New Schema\n          </Button>\n        </div>\n\n        {projects.length > 0 && (\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search projects...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 max-w-md\"\n              data-testid=\"input-search-projects\"\n            />\n          </div>\n        )}\n\n        {filteredProjects.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProjects.map((project) => (\n              <ProjectCard\n                key={project.id}\n                title={project.title}\n                description={project.description}\n                databaseType={project.databaseType as any}\n                createdAt={formatDate(project.createdAt)}\n                tableCount={0}\n                onEdit={() => navigate(`/edit/${project.id}`)}\n                onExport={() => navigate(`/exports?project=${project.id}`)}\n                onDelete={() => handleDelete(project.id)}\n              />\n            ))}\n          </div>\n        ) : projects.length > 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No projects match your search</p>\n          </div>\n        ) : (\n          <EmptyState\n            title=\"No projects yet\"\n            description=\"Create your first AI-powered database schema to get started. Just describe what you need in natural language.\"\n            actionLabel=\"Create First Schema\"\n            onAction={() => navigate(\"/new\")}\n            icon=\"sparkles\"\n          />\n        )}\n      </motion.div>\n    </div>\n  );\n}","size_bytes":5328},"client/src/pages/devops-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport default function DevOpsChatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content: \"Hello! I'm your DevOps assistant. Ask me anything about DevOps practices, CI/CD, containers, Kubernetes, infrastructure as code, monitoring, and more!\",\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n    setMessages((prev) => [...prev, { role: \"user\", content: userMessage }]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/devops-chatbot\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMessage }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to get response\");\n      }\n\n      const data = await response.json();\n      setMessages((prev) => [\n        ...prev,\n        { role: \"assistant\", content: data.response },\n      ]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to get response from chatbot\",\n        variant: \"destructive\",\n      });\n      setMessages((prev) => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"I'm sorry, I encountered an error. Please make sure the CEREBRAS_API_KEY is configured in your environment.\",\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-5xl h-[calc(100vh-8rem)]\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Bot className=\"h-8 w-8 text-primary\" />\n          DevOps Chatbot\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Get expert answers to your DevOps questions powered by AI\n        </p>\n      </div>\n\n      <Card className=\"flex flex-col h-[calc(100%-8rem)]\">\n        <ScrollArea className=\"flex-1 p-4\" ref={scrollRef}>\n          <div className=\"space-y-4\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex gap-3 ${\n                  message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.role === \"assistant\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                    <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                )}\n                <div\n                  className={`rounded-lg px-4 py-2 max-w-[80%] ${\n                    message.role === \"user\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                </div>\n                {message.role === \"user\" && (\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-muted\">\n                    <User className=\"h-4 w-4\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary\">\n                  <Bot className=\"h-4 w-4 text-primary-foreground animate-pulse\" />\n                </div>\n                <div className=\"rounded-lg px-4 py-2 bg-muted\">\n                  <p className=\"text-muted-foreground\">Thinking...</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t p-4\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Ask anything about DevOps... (Press Enter to send, Shift+Enter for new line)\"\n              className=\"min-h-[60px] resize-none\"\n              disabled={isLoading}\n            />\n            <Button\n              onClick={handleSend}\n              disabled={isLoading || !input.trim()}\n              size=\"icon\"\n              className=\"h-[60px] w-[60px]\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5479},"client/src/pages/docker-export.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardFooter, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Download, Container, FileCode, Info, Copy, Check, Rocket } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface DockerFile {\n  name: string;\n  content: string;\n  path?: string;\n}\n\ninterface DockerConfig {\n  dockerfile: string;\n  dockerCompose: string;\n  files: DockerFile[];\n  instructions: string;\n  dockerRunCommand: string;\n}\n\nexport default function DockerExport() {\n  const { toast } = useToast();\n  const [schema, setSchema] = useState(\"\");\n  const [databaseType, setDatabaseType] = useState<string>(\"\");\n  const [includeSampleData, setIncludeSampleData] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [dockerConfig, setDockerConfig] = useState<DockerConfig | null>(null);\n  const [copiedFile, setCopiedFile] = useState<string | null>(null);\n\n  const databaseTypes = [\n    { value: \"postgresql\", label: \"PostgreSQL\" },\n    { value: \"mysql\", label: \"MySQL\" },\n    { value: \"mongodb\", label: \"MongoDB\" },\n    { value: \"sqlite\", label: \"SQLite\" },\n    { value: \"sqlserver\", label: \"SQL Server\" }\n  ];\n\n  const handleGenerate = async () => {\n    if (!schema || !databaseType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both database schema and database type.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    \n    try {\n      const response = await fetch(\"/api/generate-docker\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          databaseType,\n          schema,\n          includeSampleData\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to generate Docker configuration\");\n      }\n\n      const result = await response.json();\n      setDockerConfig(result);\n      \n      toast({\n        title: \"Docker Configuration Generated!\",\n        description: \"Your database-in-a-box is ready to download.\",\n      });\n    } catch (error) {\n      console.error(\"Error generating Docker config:\", error);\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate Docker configuration. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleCopy = (text: string, fileName: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedFile(fileName);\n    setTimeout(() => setCopiedFile(null), 2000);\n    \n    toast({\n      title: \"Copied to Clipboard\",\n      description: `${fileName} copied successfully.`\n    });\n  };\n\n  const handleDownloadAll = () => {\n    if (!dockerConfig) return;\n\n    const allFiles = [\n      { name: \"Dockerfile\", content: dockerConfig.dockerfile },\n      { name: \"docker-compose.yml\", content: dockerConfig.dockerCompose },\n      ...dockerConfig.files.map(f => ({\n        name: f.path ? `${f.path}${f.name}` : f.name,\n        content: f.content\n      })),\n      { name: \"README.md\", content: dockerConfig.instructions }\n    ];\n\n    allFiles.forEach(file => {\n      const blob = new Blob([file.content], { type: \"text/plain\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = file.name;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    });\n\n    toast({\n      title: \"Downloaded Successfully\",\n      description: `All Docker files have been downloaded. ${dockerConfig.files.length > 1 ? 'Note: Create the init-db folder for initialization files.' : ''}`\n    });\n  };\n\n  const downloadFile = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen p-6 lg:p-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"max-w-7xl mx-auto space-y-8\"\n      >\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Container className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-3xl font-bold tracking-tight\">\n                Instant Database-in-a-Box\n              </h1>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Generate ready-to-run Docker images with your database schema pre-configured.\n              Perfect for quick development setup, testing, or sharing with your team.\n            </p>\n          </div>\n        </div>\n\n        <Alert className=\"border-primary/50 bg-primary/10\">\n          <Rocket className=\"h-4 w-4 text-primary\" />\n          <AlertDescription>\n            <strong>How it works:</strong> Provide your database schema, and we'll generate a complete Docker setup including\n            Dockerfile, docker-compose.yml, initialization scripts, and instructions. No Docker knowledge required!\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileCode className=\"h-5 w-5 text-primary\" />\n                Configuration\n              </CardTitle>\n              <CardDescription>\n                Provide your database schema and select options\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"database-type\">Database Type</Label>\n                <Select value={databaseType} onValueChange={setDatabaseType}>\n                  <SelectTrigger id=\"database-type\">\n                    <SelectValue placeholder=\"Select database type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {databaseTypes.map((db) => (\n                      <SelectItem key={db.value} value={db.value}>\n                        {db.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"schema\">Database Schema</Label>\n                <Textarea\n                  id=\"schema\"\n                  placeholder={`Paste your ${databaseType || \"database\"} schema here...\n\nExample for PostgreSQL:\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  username VARCHAR(255) NOT NULL UNIQUE,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);`}\n                  value={schema}\n                  onChange={(e) => setSchema(e.target.value)}\n                  className=\"min-h-[300px] font-mono text-sm\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"sample-data\"\n                  checked={includeSampleData}\n                  onCheckedChange={(checked) => setIncludeSampleData(checked as boolean)}\n                />\n                <Label htmlFor=\"sample-data\" className=\"text-sm cursor-pointer\">\n                  Include sample data placeholders\n                </Label>\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button \n                onClick={handleGenerate} \n                disabled={isGenerating || !schema || !databaseType}\n                className=\"w-full gap-2\"\n                size=\"lg\"\n              >\n                {isGenerating ? (\n                  <>\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <Container className=\"h-4 w-4\" />\n                    Generate Docker Setup\n                  </>\n                )}\n              </Button>\n            </CardFooter>\n          </Card>\n\n          <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Info className=\"h-5 w-5 text-primary\" />\n                What You'll Get\n              </CardTitle>\n              <CardDescription>\n                Complete Docker environment ready to use\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                {[\n                  {\n                    title: \"Dockerfile\",\n                    description: \"Container image definition with all dependencies\"\n                  },\n                  {\n                    title: \"docker-compose.yml\",\n                    description: \"Complete stack configuration for easy deployment\"\n                  },\n                  {\n                    title: \"Init Scripts\",\n                    description: \"Database schema automatically applied on startup\"\n                  },\n                  {\n                    title: \"Setup Instructions\",\n                    description: \"Step-by-step guide to get your database running\"\n                  },\n                  {\n                    title: \"Quick Start Commands\",\n                    description: \"Ready-to-use commands for instant deployment\"\n                  }\n                ].map((item, index) => (\n                  <motion.div\n                    key={item.title}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"flex gap-3 p-3 rounded-lg bg-muted/50\"\n                  >\n                    <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center text-primary text-sm font-bold\">\n                      {index + 1}\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-sm\">{item.title}</h4>\n                      <p className=\"text-xs text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {dockerConfig && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n          >\n            <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Generated Docker Configuration</CardTitle>\n                    <CardDescription>\n                      Download files or copy to clipboard\n                    </CardDescription>\n                  </div>\n                  <Button onClick={handleDownloadAll} className=\"gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    Download All Files\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"dockerfile\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-5 md:grid-cols-4\">\n                    <TabsTrigger value=\"dockerfile\">Dockerfile</TabsTrigger>\n                    <TabsTrigger value=\"compose\">docker-compose</TabsTrigger>\n                    <TabsTrigger value=\"files\">Init Files</TabsTrigger>\n                    <TabsTrigger value=\"commands\">Commands</TabsTrigger>\n                    <TabsTrigger value=\"instructions\" className=\"hidden md:block\">Instructions</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"dockerfile\" className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"text-sm font-semibold\">Dockerfile</h3>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleCopy(dockerConfig.dockerfile, \"Dockerfile\")}\n                          className=\"gap-2\"\n                        >\n                          {copiedFile === \"Dockerfile\" ? (\n                            <Check className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                          Copy\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => downloadFile(dockerConfig.dockerfile, \"Dockerfile\")}\n                          className=\"gap-2\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                          Download\n                        </Button>\n                      </div>\n                    </div>\n                    <SyntaxHighlighter\n                      language=\"dockerfile\"\n                      style={vscDarkPlus}\n                      className=\"rounded-lg text-sm\"\n                    >\n                      {dockerConfig.dockerfile}\n                    </SyntaxHighlighter>\n                  </TabsContent>\n\n                  <TabsContent value=\"compose\" className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"text-sm font-semibold\">docker-compose.yml</h3>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleCopy(dockerConfig.dockerCompose, \"docker-compose.yml\")}\n                          className=\"gap-2\"\n                        >\n                          {copiedFile === \"docker-compose.yml\" ? (\n                            <Check className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                          Copy\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => downloadFile(dockerConfig.dockerCompose, \"docker-compose.yml\")}\n                          className=\"gap-2\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                          Download\n                        </Button>\n                      </div>\n                    </div>\n                    <SyntaxHighlighter\n                      language=\"yaml\"\n                      style={vscDarkPlus}\n                      className=\"rounded-lg text-sm\"\n                    >\n                      {dockerConfig.dockerCompose}\n                    </SyntaxHighlighter>\n                  </TabsContent>\n\n                  <TabsContent value=\"files\" className=\"space-y-6\">\n                    {dockerConfig.files.map((file, index) => (\n                      <div key={index} className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <h3 className=\"text-sm font-semibold\">\n                              {file.path}{file.name}\n                            </h3>\n                            {file.path && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                Create in: {file.path} folder\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleCopy(file.content, file.name)}\n                              className=\"gap-2\"\n                            >\n                              {copiedFile === file.name ? (\n                                <Check className=\"h-4 w-4\" />\n                              ) : (\n                                <Copy className=\"h-4 w-4\" />\n                              )}\n                              Copy\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => downloadFile(file.content, file.name)}\n                              className=\"gap-2\"\n                            >\n                              <Download className=\"h-4 w-4\" />\n                              Download\n                            </Button>\n                          </div>\n                        </div>\n                        <SyntaxHighlighter\n                          language={\n                            file.name.endsWith('.js') ? 'javascript' :\n                            file.name.endsWith('.sh') ? 'bash' :\n                            file.name.endsWith('.sql') ? 'sql' : 'text'\n                          }\n                          style={vscDarkPlus}\n                          className=\"rounded-lg text-sm\"\n                        >\n                          {file.content}\n                        </SyntaxHighlighter>\n                      </div>\n                    ))}\n                  </TabsContent>\n\n                  <TabsContent value=\"commands\" className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"text-sm font-semibold\">Quick Start Commands</h3>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleCopy(dockerConfig.dockerRunCommand, \"commands\")}\n                        className=\"gap-2\"\n                      >\n                        {copiedFile === \"commands\" ? (\n                          <Check className=\"h-4 w-4\" />\n                        ) : (\n                          <Copy className=\"h-4 w-4\" />\n                        )}\n                        Copy\n                      </Button>\n                    </div>\n                    <SyntaxHighlighter\n                      language=\"bash\"\n                      style={vscDarkPlus}\n                      className=\"rounded-lg text-sm\"\n                    >\n                      {dockerConfig.dockerRunCommand}\n                    </SyntaxHighlighter>\n                  </TabsContent>\n\n                  <TabsContent value=\"instructions\" className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <h3 className=\"text-sm font-semibold\">Setup Instructions</h3>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => downloadFile(dockerConfig.instructions, \"README.md\")}\n                        className=\"gap-2\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                        Download README\n                      </Button>\n                    </div>\n                    <div className=\"prose prose-sm dark:prose-invert max-w-none p-6 bg-muted/50 rounded-lg overflow-auto\">\n                      <pre className=\"whitespace-pre-wrap\">{dockerConfig.instructions}</pre>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":20988},"client/src/pages/exports.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, FileText, Database } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { EmptyState } from \"@/components/empty-state\";\n\n// TODO: Remove mock data - replace with real data from backend\nconst mockExports = [\n  {\n    id: \"1\",\n    projectName: \"E-commerce Platform\",\n    format: \"SQL\",\n    size: \"4.2 KB\",\n    exportedAt: \"2 hours ago\",\n  },\n  {\n    id: \"2\",\n    projectName: \"Social Media App\",\n    format: \"MongoDB JSON\",\n    size: \"6.8 KB\",\n    exportedAt: \"1 day ago\",\n  },\n  {\n    id: \"3\",\n    projectName: \"Food Delivery Service\",\n    format: \"Prisma\",\n    size: \"3.1 KB\",\n    exportedAt: \"3 days ago\",\n  },\n];\n\nexport default function Exports() {\n  const [exports] = useState(mockExports); // TODO: Replace with real state management\n\n  const handleDownload = (exportId: string) => {\n    console.log(\"Download export:\", exportId);\n    // TODO: Implement download functionality\n  };\n\n  if (exports.length === 0) {\n    return (\n      <div className=\"min-h-screen p-6 lg:p-8\">\n        <EmptyState\n          title=\"No exports yet\"\n          description=\"Export your database schemas to download them as SQL files, Prisma schemas, or MongoDB configurations.\"\n          icon=\"database\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-6 lg:p-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"max-w-7xl mx-auto space-y-8\"\n      >\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Exported Schemas</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Download and manage your exported database schemas\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {exports.map((exportItem, index) => (\n            <motion.div\n              key={exportItem.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n            >\n              <Card className=\"border-card-border bg-card/80 backdrop-blur-xl hover-elevate\" data-testid={`card-export-${exportItem.id}`}>\n                <CardHeader className=\"space-y-0 pb-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold truncate\" data-testid=\"text-export-project\">\n                        {exportItem.projectName}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {exportItem.exportedAt}\n                      </p>\n                    </div>\n                    <FileText className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Format</span>\n                    <Badge variant=\"outline\" data-testid=\"badge-export-format\">{exportItem.format}</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Size</span>\n                    <span className=\"font-mono\">{exportItem.size}</span>\n                  </div>\n                </CardContent>\n                <CardFooter className=\"pt-3 border-t border-card-border\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full gap-2 hover-elevate active-elevate-2\"\n                    onClick={() => handleDownload(exportItem.id)}\n                    data-testid=\"button-download-export\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    Download\n                  </Button>\n                </CardFooter>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":4387},"client/src/pages/infra-drift.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, AlertTriangle, CheckCircle2, Activity, ShieldAlert, GitCompare } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DriftDetail {\n  resource: string;\n  field: string;\n  desired: string;\n  actual: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\ninterface InfraDriftResult {\n  driftSummary: string;\n  driftDetails: DriftDetail[];\n  explanation: string;\n  autoFixSuggestions: string[];\n  dangerousChanges: string[];\n  recommendations: string;\n}\n\nconst getSeverityColor = (severity: string) => {\n  switch (severity) {\n    case \"critical\":\n      return \"bg-red-500\";\n    case \"high\":\n      return \"bg-orange-500\";\n    case \"medium\":\n      return \"bg-yellow-500\";\n    case \"low\":\n      return \"bg-blue-500\";\n    default:\n      return \"bg-gray-500\";\n  }\n};\n\nconst getSeverityVariant = (severity: string): \"default\" | \"destructive\" | \"outline\" | \"secondary\" => {\n  switch (severity) {\n    case \"critical\":\n    case \"high\":\n      return \"destructive\";\n    case \"medium\":\n      return \"outline\";\n    default:\n      return \"secondary\";\n  }\n};\n\nexport default function InfraDrift() {\n  const [desiredState, setDesiredState] = useState(\"\");\n  const [actualState, setActualState] = useState(\"\");\n  const [iacType, setIacType] = useState(\"terraform\");\n  const [result, setResult] = useState<InfraDriftResult | null>(null);\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: { desiredState: string; actualState: string; iacType: string }) => {\n      const response = await fetch(\"/api/analyze-drift\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to analyze infrastructure drift\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (!desiredState.trim() || !actualState.trim()) return;\n    analyzeMutation.mutate({ desiredState, actualState, iacType });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold flex items-center gap-2 mb-2\">\n            <Activity className=\"h-8 w-8 md:h-10 md:w-10 text-primary\" />\n            Infra Drift Guardian\n          </h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">\n            Detect and analyze infrastructure drift between IaC and actual cloud state\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Infrastructure as Code (Desired State)</CardTitle>\n                <CardDescription>Paste your Terraform, Helm, or CloudFormation config</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"iac-type\">IaC Type</Label>\n                  <Select value={iacType} onValueChange={setIacType}>\n                    <SelectTrigger id=\"iac-type\" className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"terraform\">Terraform</SelectItem>\n                      <SelectItem value=\"helm\">Helm</SelectItem>\n                      <SelectItem value=\"cloudformation\">CloudFormation</SelectItem>\n                      <SelectItem value=\"pulumi\">Pulumi</SelectItem>\n                      <SelectItem value=\"kubernetes\">Kubernetes</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"desired-state\">Desired State</Label>\n                  <Textarea\n                    id=\"desired-state\"\n                    placeholder=\"resource &quot;aws_instance&quot; &quot;prod_app&quot; {&#10;  instance_type = &quot;t3.medium&quot;&#10;  ami = &quot;ami-12345&quot;&#10;  ...&#10;}\"\n                    value={desiredState}\n                    onChange={(e) => setDesiredState(e.target.value)}\n                    className=\"font-mono text-xs md:text-sm min-h-[200px] md:min-h-[250px]\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Actual Cloud State</CardTitle>\n                <CardDescription>Paste the actual configuration from AWS/GCP/Azure/K8s</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"actual-state\">Actual State</Label>\n                  <Textarea\n                    id=\"actual-state\"\n                    placeholder=\"instance_type: t3.xlarge&#10;ami: ami-12345&#10;public_ip: 54.123.45.67&#10;security_groups: [sg-open]&#10;...\"\n                    value={actualState}\n                    onChange={(e) => setActualState(e.target.value)}\n                    className=\"font-mono text-xs md:text-sm min-h-[200px] md:min-h-[250px]\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button\n              onClick={handleAnalyze}\n              disabled={!desiredState.trim() || !actualState.trim() || analyzeMutation.isPending}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {analyzeMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Analyzing Drift...\n                </>\n              ) : (\n                <>\n                  <GitCompare className=\"mr-2 h-4 w-4\" />\n                  Analyze Infrastructure Drift\n                </>\n              )}\n            </Button>\n\n            {analyzeMutation.isError && (\n              <Alert variant=\"destructive\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertTitle>Error</AlertTitle>\n                <AlertDescription>\n                  {(analyzeMutation.error as Error).message}\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n\n          <div className=\"space-y-6\">\n            {result && (\n              <>\n                <Card className=\"border-primary/50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5\" />\n                      Drift Summary\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"font-semibold text-sm md:text-base\">{result.driftSummary}</p>\n                  </CardContent>\n                </Card>\n\n                {result.driftDetails.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Drift Details</CardTitle>\n                      <CardDescription>\n                        {result.driftDetails.length} configuration difference(s) detected\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[300px] md:h-[350px]\">\n                        <div className=\"space-y-4\">\n                          {result.driftDetails.map((drift, idx) => (\n                            <div key={idx} className=\"border rounded-lg p-4 space-y-2\">\n                              <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n                                <div className=\"flex-1\">\n                                  <p className=\"font-semibold text-sm\">{drift.resource}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{drift.field}</p>\n                                </div>\n                                <Badge variant={getSeverityVariant(drift.severity)} className=\"shrink-0\">\n                                  {drift.severity.toUpperCase()}\n                                </Badge>\n                              </div>\n                              <Separator />\n                              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                <div>\n                                  <p className=\"text-muted-foreground mb-1\">Desired:</p>\n                                  <code className=\"bg-muted p-1 rounded break-all\">{drift.desired}</code>\n                                </div>\n                                <div>\n                                  <p className=\"text-muted-foreground mb-1\">Actual:</p>\n                                  <code className=\"bg-muted p-1 rounded break-all\">{drift.actual}</code>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Explanation</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[200px] md:h-[250px]\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{result.explanation}</p>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n\n                {result.dangerousChanges.length > 0 && (\n                  <Card className=\"border-red-500/50\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2 text-red-600\">\n                        <ShieldAlert className=\"h-5 w-5\" />\n                        Dangerous Changes\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[150px]\">\n                        <ul className=\"space-y-2\">\n                          {result.dangerousChanges.map((change, idx) => (\n                            <li key={idx} className=\"flex gap-2 text-sm\">\n                              <Badge variant=\"destructive\" className=\"shrink-0\">\n                                ⚠\n                              </Badge>\n                              <span>{change}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {result.autoFixSuggestions.length > 0 && (\n                  <Card className=\"border-green-500/50\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2 text-green-600\">\n                        <CheckCircle2 className=\"h-5 w-5\" />\n                        Auto-Fix Suggestions\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[200px]\">\n                        <ol className=\"space-y-3 list-decimal list-inside\">\n                          {result.autoFixSuggestions.map((fix, idx) => (\n                            <li key={idx} className=\"text-sm\">\n                              <span className=\"ml-2\">{fix}</span>\n                            </li>\n                          ))}\n                        </ol>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recommendations</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[150px]\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{result.recommendations}</p>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n\n            {!result && !analyzeMutation.isPending && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"flex flex-col items-center justify-center py-16 md:py-24 text-center\">\n                  <Activity className=\"h-16 w-16 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground text-sm md:text-base px-4\">\n                    Enter your IaC desired state and actual cloud state to detect drift\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13377},"client/src/pages/kubernetes-export.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardFooter, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Download, Container, FileCode, Info, Copy, Check, Rocket } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface K8sFile {\n  name: string;\n  content: string;\n  path?: string;\n}\n\ninterface K8sConfig {\n  deployment: string;\n  service: string;\n  configMap?: string;\n  secrets?: string;\n  instructions: string;\n}\n\nexport default function KubernetesExport() {\n  const { toast } = useToast();\n  const [schema, setSchema] = useState(\"\");\n  const [databaseType, setDatabaseType] = useState<string>(\"\");\n  const [includeSampleData, setIncludeSampleData] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [k8sConfig, setK8sConfig] = useState<K8sConfig | null>(null);\n  const [copiedFile, setCopiedFile] = useState<string | null>(null);\n\n  const databaseTypes = [\n    { value: \"postgresql\", label: \"PostgreSQL\" },\n    { value: \"mysql\", label: \"MySQL\" },\n    { value: \"mongodb\", label: \"MongoDB\" },\n    { value: \"sqlite\", label: \"SQLite\" },\n    { value: \"sqlserver\", label: \"SQL Server\" }\n  ];\n\n  const handleGenerate = async () => {\n    if (!schema || !databaseType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both database schema and database type.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n\n    try {\n      const response = await fetch(\"/api/generate-kubernetes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          databaseType,\n          schema,\n          includeSampleData\n        })\n      });\n\n      if (!response.ok) throw new Error(\"Failed to generate Kubernetes manifests\");\n\n      const result = await response.json();\n      setK8sConfig(result);\n\n      toast({\n        title: \"Kubernetes Configuration Generated!\",\n        description: \"Your database manifests are ready.\",\n      });\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate Kubernetes configuration. Try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleCopy = (text: string, fileName: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedFile(fileName);\n    setTimeout(() => setCopiedFile(null), 2000);\n    toast({\n      title: \"Copied\",\n      description: `${fileName} copied successfully.`\n    });\n  };\n\n  const downloadFile = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleDownloadAll = () => {\n    if (!k8sConfig) return;\n\n    const files = [\n      { name: \"deployment.yaml\", content: k8sConfig.deployment },\n      { name: \"service.yaml\", content: k8sConfig.service },\n      ...(k8sConfig.configMap ? [{ name: \"configmap.yaml\", content: k8sConfig.configMap }] : []),\n      ...(k8sConfig.secrets ? [{ name: \"secrets.yaml\", content: k8sConfig.secrets }] : []),\n      { name: \"README.md\", content: k8sConfig.instructions }\n    ];\n\n    files.forEach(file => downloadFile(file.content, file.name));\n\n    toast({\n      title: \"Downloaded\",\n      description: \"All Kubernetes manifests have been downloaded.\"\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen p-6 lg:p-8\">\n      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }} className=\"max-w-7xl mx-auto space-y-8\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Container className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-3xl font-bold tracking-tight\">\n                Instant Database Kubernetes Setup\n              </h1>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Generate ready-to-deploy Kubernetes manifests for your database.\n            </p>\n          </div>\n        </div>\n\n        <Alert className=\"border-primary/50 bg-primary/10\">\n          <Rocket className=\"h-4 w-4 text-primary\" />\n          <AlertDescription>\n            <strong>How it works:</strong> Provide your schema and get full Kubernetes manifests including Deployment, Service, ConfigMaps, Secrets, and setup instructions.\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileCode className=\"h-5 w-5 text-primary\" />\n                Configuration\n              </CardTitle>\n              <CardDescription>Provide your database schema and options</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"database-type\">Database Type</Label>\n                <Select value={databaseType} onValueChange={setDatabaseType}>\n                  <SelectTrigger id=\"database-type\">\n                    <SelectValue placeholder=\"Select database type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {databaseTypes.map(db => (\n                      <SelectItem key={db.value} value={db.value}>{db.label}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"schema\">Database Schema</Label>\n                <Textarea\n                  id=\"schema\"\n                  placeholder={`Paste your ${databaseType || \"database\"} schema here...`}\n                  value={schema}\n                  onChange={e => setSchema(e.target.value)}\n                  className=\"min-h-[300px] font-mono text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"sample-data\"\n                  checked={includeSampleData}\n                  onCheckedChange={checked => setIncludeSampleData(checked as boolean)}\n                />\n                <Label htmlFor=\"sample-data\" className=\"text-sm cursor-pointer\">\n                  Include sample data placeholders\n                </Label>\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button\n                onClick={handleGenerate}\n                disabled={isGenerating || !schema || !databaseType}\n                className=\"w-full gap-2\"\n                size=\"lg\"\n              >\n                {isGenerating ? (\n                  <>\n                    <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <Container className=\"h-4 w-4\" />\n                    Generate Kubernetes Manifests\n                  </>\n                )}\n              </Button>\n            </CardFooter>\n          </Card>\n\n          <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Info className=\"h-5 w-5 text-primary\" />\n                What You'll Get\n              </CardTitle>\n              <CardDescription>\n                Complete Kubernetes setup ready to deploy\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                {[\"Deployment\", \"Service\", \"ConfigMap (optional)\", \"Secrets (optional)\", \"Setup Instructions\"].map((title, index) => (\n                  <motion.div key={title} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.1 }} className=\"flex gap-3 p-3 rounded-lg bg-muted/50\">\n                    <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center text-primary text-sm font-bold\">\n                      {index + 1}\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-sm\">{title}</h4>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {k8sConfig && (\n          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }}>\n            <Card className=\"border-card-border bg-card/80 backdrop-blur-xl\">\n              <CardHeader className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Generated Kubernetes Configuration</CardTitle>\n                  <CardDescription>Download manifests or copy to clipboard</CardDescription>\n                </div>\n                <Button onClick={handleDownloadAll} className=\"gap-2\">\n                  <Download className=\"h-4 w-4\" />\n                  Download All Files\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"deployment\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-5 md:grid-cols-4\">\n                    <TabsTrigger value=\"deployment\">Deployment</TabsTrigger>\n                    <TabsTrigger value=\"service\">Service</TabsTrigger>\n                    {k8sConfig.configMap && <TabsTrigger value=\"configMap\">ConfigMap</TabsTrigger>}\n                    {k8sConfig.secrets && <TabsTrigger value=\"secrets\">Secrets</TabsTrigger>}\n                    <TabsTrigger value=\"instructions\" className=\"hidden md:block\">Instructions</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"deployment\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <h3 className=\"text-sm font-semibold\">Deployment</h3>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleCopy(k8sConfig.deployment, \"deployment.yaml\")} className=\"gap-2\">\n                          {copiedFile === \"deployment.yaml\" ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />} Copy\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => downloadFile(k8sConfig.deployment, \"deployment.yaml\")} className=\"gap-2\">\n                          <Download className=\"h-4 w-4\" /> Download\n                        </Button>\n                      </div>\n                    </div>\n                    <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} className=\"rounded-lg text-sm\">\n                      {k8sConfig.deployment}\n                    </SyntaxHighlighter>\n                  </TabsContent>\n\n                  <TabsContent value=\"service\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <h3 className=\"text-sm font-semibold\">Service</h3>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleCopy(k8sConfig.service, \"service.yaml\")} className=\"gap-2\">\n                          {copiedFile === \"service.yaml\" ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />} Copy\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => downloadFile(k8sConfig.service, \"service.yaml\")} className=\"gap-2\">\n                          <Download className=\"h-4 w-4\" /> Download\n                        </Button>\n                      </div>\n                    </div>\n                    <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} className=\"rounded-lg text-sm\">\n                      {k8sConfig.service}\n                    </SyntaxHighlighter>\n                  </TabsContent>\n\n                  {k8sConfig.configMap && (\n                    <TabsContent value=\"configMap\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <h3 className=\"text-sm font-semibold\">ConfigMap</h3>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleCopy(k8sConfig.configMap!, \"configmap.yaml\")} className=\"gap-2\">\n                            {copiedFile === \"configmap.yaml\" ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />} Copy\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => downloadFile(k8sConfig.configMap!, \"configmap.yaml\")} className=\"gap-2\">\n                            <Download className=\"h-4 w-4\" /> Download\n                          </Button>\n                        </div>\n                      </div>\n                      <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} className=\"rounded-lg text-sm\">\n                        {k8sConfig.configMap}\n                      </SyntaxHighlighter>\n                    </TabsContent>\n                  )}\n\n                  {k8sConfig.secrets && (\n                    <TabsContent value=\"secrets\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <h3 className=\"text-sm font-semibold\">Secrets</h3>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleCopy(k8sConfig.secrets!, \"secrets.yaml\")} className=\"gap-2\">\n                            {copiedFile === \"secrets.yaml\" ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />} Copy\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => downloadFile(k8sConfig.secrets!, \"secrets.yaml\")} className=\"gap-2\">\n                            <Download className=\"h-4 w-4\" /> Download\n                          </Button>\n                        </div>\n                      </div>\n                      <SyntaxHighlighter language=\"yaml\" style={vscDarkPlus} className=\"rounded-lg text-sm\">\n                        {k8sConfig.secrets}\n                      </SyntaxHighlighter>\n                    </TabsContent>\n                  )}\n\n                  <TabsContent value=\"instructions\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <h3 className=\"text-sm font-semibold\">Setup Instructions</h3>\n                      <Button onClick={() => downloadFile(k8sConfig.instructions, \"README.md\")} className=\"gap-2\">\n                        <Download className=\"h-4 w-4\" /> Download README\n                      </Button>\n                    </div>\n                    <div className=\"prose prose-sm dark:prose-invert max-w-none p-6 bg-muted/50 rounded-lg overflow-auto\">\n                      <pre className=\"whitespace-pre-wrap\">{k8sConfig.instructions}</pre>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":16320},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Database, Sparkles, Code2, Network, Zap, Shield, Boxes } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [, navigate] = useLocation();\n\n  const features = [\n    {\n      icon: <Sparkles className=\"h-6 w-6\" />,\n      title: \"AI-Powered Generation\",\n      description: \"Describe your database in plain English and let Llama AI generate optimized schemas instantly\"\n    },\n    {\n      icon: <Database className=\"h-6 w-6\" />,\n      title: \"Multi-Database Support\",\n      description: \"Generate schemas for MySQL, PostgreSQL, MongoDB, SQLite, Oracle, and SQL Server\"\n    },\n    {\n      icon: <Network className=\"h-6 w-6\" />,\n      title: \"Visual ERD Diagrams\",\n      description: \"Auto-generate entity-relationship diagrams and export as PNG, PDF, or interactive components\"\n    },\n    {\n      icon: <Code2 className=\"h-6 w-6\" />,\n      title: \"Multiple Export Formats\",\n      description: \"Export as SQL, JSON, YAML, Prisma, TypeORM, Mongoose, and more\"\n    },\n    {\n      icon: <Zap className=\"h-6 w-6\" />,\n      title: \"Smart Optimization\",\n      description: \"Get normalization suggestions and query optimization tips powered by AI\"\n    },\n    {\n      icon: <Shield className=\"h-6 w-6\" />,\n      title: \"Migration Scripts\",\n      description: \"Auto-generate migration scripts and Docker configurations for instant deployment\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-background to-background\" />\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\n        \n        <div className=\"relative max-w-7xl mx-auto px-6 lg:px-8 pt-20 pb-32\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center space-y-8\"\n          >\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 backdrop-blur-sm\" data-testid=\"badge-ai-powered\">\n              <Sparkles className=\"h-4 w-4 text-primary\" />\n              <span className=\"text-sm font-medium text-primary\">Powered by Cerebras Llama AI</span>\n            </div>\n\n            <h1 className=\"text-5xl md:text-7xl font-bold tracking-tight bg-gradient-to-br from-foreground to-foreground/60 bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n              Create your databases like\n              <br />\n              <span className=\"text-primary\">never before</span>\n              <br />\n              <span className=\"text-3xl md:text-5xl\">and scale your app</span>\n            </h1>\n\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              Design, visualize, and export production-ready database schemas using natural language.\n              AI-powered optimization and beautiful visual diagrams.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4 pt-4\">\n              <Button\n                size=\"lg\"\n                className=\"gap-2 text-lg px-8 py-6 hover-elevate active-elevate-2\"\n                onClick={() => navigate(\"/dashboard\")}\n                data-testid=\"button-get-started\"\n              >\n                <Sparkles className=\"h-5 w-5\" />\n                Get Started Free\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"gap-2 text-lg px-8 py-6 hover-elevate active-elevate-2\"\n                onClick={() => navigate(\"/new\")}\n                data-testid=\"button-try-demo\"\n              >\n                <Code2 className=\"h-5 w-5\" />\n                Try Demo\n              </Button>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 40 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"mt-24 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          >\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: 0.3 + index * 0.1 }}\n                className=\"group relative\"\n              >\n                <div className=\"h-full p-6 rounded-2xl border border-border bg-card/50 backdrop-blur-xl hover:bg-card/80 transition-all duration-300 hover-elevate\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"p-3 rounded-xl bg-primary/10 text-primary group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-300\">\n                      {feature.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                      <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                        {feature.description}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8, delay: 0.8 }}\n            className=\"mt-24 text-center\"\n          >\n            <div className=\"inline-flex items-center gap-6 px-8 py-4 rounded-2xl bg-card/30 border border-border backdrop-blur-xl\">\n              <div className=\"flex items-center gap-2\">\n                <Boxes className=\"h-5 w-5 text-primary\" />\n                <span className=\"text-sm font-medium\">6+ Databases</span>\n              </div>\n              <div className=\"h-6 w-px bg-border\" />\n              <div className=\"flex items-center gap-2\">\n                <Code2 className=\"h-5 w-5 text-primary\" />\n                <span className=\"text-sm font-medium\">8+ Export Formats</span>\n              </div>\n              <div className=\"h-6 w-px bg-border\" />\n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"h-5 w-5 text-primary\" />\n                <span className=\"text-sm font-medium\">AI-Powered</span>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6643},"client/src/pages/migration-safety.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, AlertTriangle, CheckCircle2, Clock, Shield } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface MigrationAnalysis {\n  analysis: string;\n  saferRewrite: string;\n  warnings: string[];\n  estimatedLockTime: string;\n  recommendations: string[];\n}\n\nexport default function MigrationSafety() {\n  const [migration, setMigration] = useState(\"\");\n  const [databaseType, setDatabaseType] = useState(\"postgresql\");\n  const [result, setResult] = useState<MigrationAnalysis | null>(null);\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: { migration: string; databaseType: string }) => {\n      const response = await fetch(\"/api/analyze-migration\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to analyze migration\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(data);\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (!migration.trim()) return;\n    analyzeMutation.mutate({ migration, databaseType });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold flex items-center gap-2 mb-2\">\n            <Shield className=\"h-8 w-8 md:h-10 md:w-10 text-primary\" />\n            Migration Safety Assistant\n          </h1>\n          <p className=\"text-muted-foreground text-sm md:text-base\">\n            Analyze SQL migrations for potential risks and get safer alternatives\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"h-fit\">\n            <CardHeader>\n              <CardTitle>Your Migration</CardTitle>\n              <CardDescription>Paste your SQL migration or schema change</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"database-type\">Database Type</Label>\n                <Select value={databaseType} onValueChange={setDatabaseType}>\n                  <SelectTrigger id=\"database-type\" className=\"w-full\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"postgresql\">PostgreSQL</SelectItem>\n                    <SelectItem value=\"mysql\">MySQL</SelectItem>\n                    <SelectItem value=\"sqlserver\">SQL Server</SelectItem>\n                    <SelectItem value=\"oracle\">Oracle</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"migration\">SQL Migration</Label>\n                <Textarea\n                  id=\"migration\"\n                  placeholder=\"ALTER TABLE users ADD COLUMN email VARCHAR(255) NOT NULL;&#10;CREATE INDEX idx_users_email ON users(email);\"\n                  value={migration}\n                  onChange={(e) => setMigration(e.target.value)}\n                  className=\"font-mono text-sm min-h-[200px] md:min-h-[300px]\"\n                />\n              </div>\n\n              <Button\n                onClick={handleAnalyze}\n                disabled={!migration.trim() || analyzeMutation.isPending}\n                className=\"w-full\"\n              >\n                {analyzeMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"mr-2 h-4 w-4\" />\n                    Analyze Migration\n                  </>\n                )}\n              </Button>\n\n              {analyzeMutation.isError && (\n                <Alert variant=\"destructive\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertTitle>Error</AlertTitle>\n                  <AlertDescription>\n                    {(analyzeMutation.error as Error).message}\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-6\">\n            {result && (\n              <>\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"h-5 w-5\" />\n                      Estimated Lock Time\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {result.estimatedLockTime}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {result.warnings.length > 0 && (\n                  <Card className=\"border-orange-500/50\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2 text-orange-600\">\n                        <AlertTriangle className=\"h-5 w-5\" />\n                        Warnings\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ScrollArea className=\"h-[150px]\">\n                        <ul className=\"space-y-2\">\n                          {result.warnings.map((warning, idx) => (\n                            <li key={idx} className=\"flex gap-2 text-sm\">\n                              <Badge variant=\"destructive\" className=\"shrink-0\">\n                                {idx + 1}\n                              </Badge>\n                              <span>{warning}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </ScrollArea>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Analysis</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[200px]\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{result.analysis}</p>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-green-500/50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-green-600\">\n                      <CheckCircle2 className=\"h-5 w-5\" />\n                      Safer Rewrite\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[200px]\">\n                      <pre className=\"text-sm font-mono bg-muted p-4 rounded-lg overflow-x-auto\">\n                        {result.saferRewrite}\n                      </pre>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5\" />\n                      Recommendations\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[250px]\">\n                      <ol className=\"space-y-3 list-decimal list-inside\">\n                        {result.recommendations.map((rec, idx) => (\n                          <li key={idx} className=\"text-sm\">\n                            <span className=\"ml-2\">{rec}</span>\n                          </li>\n                        ))}\n                      </ol>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n\n            {!result && !analyzeMutation.isPending && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"flex flex-col items-center justify-center py-16 text-center\">\n                  <Shield className=\"h-16 w-16 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground text-sm md:text-base px-4\">\n                    Enter your SQL migration and click \"Analyze Migration\" to get safety insights\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9153},"client/src/pages/new-schema.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { AIInput } from \"@/components/ai-input\";\nimport { SchemaOutput } from \"@/components/schema-output\";\nimport { ERDiagram } from \"@/components/er-diagram\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Save, Code2, Network, Database } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { schemaToNodesAndEdges } from \"@/lib/schema-to-diagram\";\n\nconst DATABASE_TYPES = [\n  { value: \"PostgreSQL\", label: \"PostgreSQL\" },\n  { value: \"MySQL\", label: \"MySQL\" },\n  { value: \"MongoDB\", label: \"MongoDB\" },\n  { value: \"SQLite\", label: \"SQLite\" },\n  { value: \"Oracle\", label: \"Oracle\" },\n  { value: \"SQL Server\", label: \"SQL Server\" },\n];\n\n\n\nexport default function NewSchema() {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [generatedSchema, setGeneratedSchema] = useState<any>(null);\n  const [activeView, setActiveView] = useState<\"code\" | \"diagram\">(\"code\");\n  const [databaseType, setDatabaseType] = useState(\"PostgreSQL\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const[Redirect,setRedirect]=useState(\"\");\n\n  const diagramData = useMemo(() => {\n    if (!generatedSchema?.schemas?.sql) {\n      return { nodes: [], edges: [] };\n    }\n    return schemaToNodesAndEdges(generatedSchema.schemas.sql);\n  }, [generatedSchema]);\n\n  const handleGenerate = async (userPrompt: string) => {\n    setIsGenerating(true);\n    setPrompt(userPrompt);\n    \n    try {\n      const response = await fetch(\"/api/generate-schema\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: userPrompt,\n          databaseType,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to generate schema\");\n      }\n\n      const result = await response.json();\n      setGeneratedSchema(result);\n\n      \n      if (!title) {\n        const words = userPrompt.split(\" \").slice(0, 5).join(\" \");\n        setTitle(words.charAt(0).toUpperCase() + words.slice(1));\n      }\n      if (!description) {\n        setDescription(userPrompt);\n      }\n\n      toast({\n        title: \"Schema generated!\",\n        description: \"Your AI-powered database schema is ready\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Generation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!generatedSchema || !title || !description) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please provide a title and description\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const response = await fetch(\"/api/projects\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          title,\n          description,\n          prompt,\n          databaseType,\n          schemas: generatedSchema.schemas,\n          explanation: generatedSchema.explanation,\n          normalizationSuggestions: generatedSchema.normalizationSuggestions,\n          queryExamples: generatedSchema.queryExamples,\n          migrationScript: generatedSchema.migrationScript,\n          dockerfile: generatedSchema.dockerfile,\n          dockerCompose: generatedSchema.dockerCompose,\n        }),\n      });\n      toast({\n        title: \"Saved feature coming soon!\",\n        description: \"this feature is under development. wait for next update!\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save project\");\n      }\n\n      \n      setIsSaving(false);\n      \n     \n\n\n    } catch (error) {\n      \n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen p-6 lg:p-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"max-w-7xl mx-auto space-y-8\"\n      >\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">AI Schema Generator</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Describe your database in natural language and let AI do the rest\n            </p>\n          </div>\n          {generatedSchema && (\n            <Button onClick={handleSave} disabled={isSaving} className=\"gap-2\" data-testid=\"button-save-project\">\n              <Save className=\"h-4 w-4\" />\n              {isSaving ? \"Saving...\" : \"Save Project\"}\n            </Button>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <div className=\"space-y-6\">\n            <div className=\"rounded-2xl border border-card-border bg-card/80 backdrop-blur-xl p-6 space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5 text-primary\" />\n                <h3 className=\"text-lg font-semibold\">Database Configuration</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"database-type\">Database Type</Label>\n                  <Select value={databaseType} onValueChange={setDatabaseType}>\n                    <SelectTrigger id=\"database-type\" data-testid=\"select-database-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {DATABASE_TYPES.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {generatedSchema && (\n                  <>\n                    <div>\n                      <Label htmlFor=\"project-title\">Project Title</Label>\n                      <Input\n                        id=\"project-title\"\n                        value={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                        placeholder=\"My Database Project\"\n                        data-testid=\"input-project-title\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"project-description\">Description</Label>\n                      <Input\n                        id=\"project-description\"\n                        value={description}\n                        onChange={(e) => setDescription(e.target.value)}\n                        placeholder=\"A brief description of your project\"\n                        data-testid=\"input-project-description\"\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <AIInput onGenerate={handleGenerate} isGenerating={isGenerating} />\n          </div>\n\n          <div className=\"space-y-4\">\n            <AnimatePresence mode=\"wait\">\n              {generatedSchema ? (\n                <motion.div\n                  key=\"result\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"space-y-4\"\n                >\n                  <Tabs value={activeView} onValueChange={(v) => setActiveView(v as \"code\" | \"diagram\")}>\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"code\" className=\"gap-2\" data-testid=\"tab-code-view\">\n                        <Code2 className=\"h-4 w-4\" />\n                        Code\n                      </TabsTrigger>\n                      <TabsTrigger value=\"diagram\" className=\"gap-2\" data-testid=\"tab-diagram-view\">\n                        <Network className=\"h-4 w-4\" />\n                        Diagram\n                      </TabsTrigger>\n                    </TabsList>\n                    <TabsContent value=\"code\" className=\"mt-6\">\n                      <SchemaOutput {...generatedSchema} />\n                    </TabsContent>\n                    <TabsContent value=\"diagram\" className=\"mt-6\">\n                      <ERDiagram \n                        initialNodes={diagramData.nodes} \n                        initialEdges={diagramData.edges} \n                      />\n                    </TabsContent>\n                  </Tabs>\n                </motion.div>\n              ) : (\n                <motion.div\n                  key=\"placeholder\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"flex items-center justify-center h-96 rounded-2xl border-2 border-dashed border-border bg-card/30 backdrop-blur-sm\"\n                >\n                  <p className=\"text-muted-foreground\">Your generated schema will appear here</p>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n\n\n     ","size_bytes":9933},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/voice-chat.tsx":{"content":"import { useState } from \"react\";\nimport { VoiceAgent } from  \"../components/voice-agent\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Database, Code, ServerCog } from \"lucide-react\";\n\nexport default function VoiceChat() {\n  const [activeTab, setActiveTab] = useState(\"devops\");\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Voice Assistant</h1>\n        <p className=\"text-muted-foreground\">\n          Talk to AI about DevOps, Databases, and Coding using your voice\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"devops\" className=\"gap-2\">\n            <ServerCog className=\"h-4 w-4\" />\n            DevOps\n          </TabsTrigger>\n          <TabsTrigger value=\"database\" className=\"gap-2\">\n            <Database className=\"h-4 w-4\" />\n            Database\n          </TabsTrigger>\n          <TabsTrigger value=\"coding\" className=\"gap-2\">\n            <Code className=\"h-4 w-4\" />\n            Coding\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"devops\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>DevOps Voice Assistant</CardTitle>\n              <CardDescription>\n                Get expert help with CI/CD, containers, Kubernetes, infrastructure as code, and more\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <VoiceAgent\n                apiEndpoint=\"/api/devops-chatbot\"\n                title=\"DevOps Expert\"\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"database\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Database Voice Assistant</CardTitle>\n              <CardDescription>\n                Ask questions about database design, optimization, queries, and best practices\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <VoiceAgent\n                apiEndpoint=\"/api/database-chat\"\n                title=\"Database Advisor\"\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"coding\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Coding Voice Assistant</CardTitle>\n              <CardDescription>\n                Get help with code generation, debugging, and generative AI topics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <VoiceAgent\n                apiEndpoint=\"/api/gen-chat\"\n                title=\"Coding Assistant\"\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Card className=\"border-dashed\">\n        <CardHeader>\n          <CardTitle className=\"text-sm\">How to use</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-sm text-muted-foreground space-y-2\">\n          <ol className=\"list-decimal list-inside space-y-1\">\n            <li>Click \"Start Voice Chat\" to begin listening</li>\n            <li>Ask your question clearly</li>\n            <li>The AI will respond both in text and voice</li>\n            <li>Click \"Stop Speaking\" to interrupt the voice response</li>\n            <li>Click \"Stop Listening\" when you're done</li>\n          </ol>\n          <p className=\"text-xs mt-4\">\n            Note: Voice recognition requires a modern browser with microphone permissions\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3882},"client/src/components/examples/ai-input.tsx":{"content":"import { AIInput } from \"../ai-input\";\nimport { useState } from \"react\";\n\nexport default function AIInputExample() {\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const handleGenerate = (prompt: string) => {\n    console.log(\"Generating schema for:\", prompt);\n    setIsGenerating(true);\n    setTimeout(() => setIsGenerating(false), 3000);\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <AIInput onGenerate={handleGenerate} isGenerating={isGenerating} />\n    </div>\n  );\n}\n","size_bytes":499},"client/src/components/examples/app-sidebar.tsx":{"content":"import { AppSidebar } from \"../app-sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":295},"client/src/components/examples/empty-state.tsx":{"content":"import { EmptyState } from \"../empty-state\";\n\nexport default function EmptyStateExample() {\n  return (\n    <div className=\"p-6\">\n      <EmptyState\n        title=\"No projects yet\"\n        description=\"Create your first AI-powered database schema to get started. Just describe what you need in natural language.\"\n        actionLabel=\"Create First Schema\"\n        onAction={() => console.log(\"Create schema clicked\")}\n        icon=\"sparkles\"\n      />\n    </div>\n  );\n}\n","size_bytes":466},"client/src/components/examples/er-diagram.tsx":{"content":"import { ERDiagram } from \"../er-diagram\";\n\nexport default function ERDiagramExample() {\n  return (\n    <div className=\"p-6 max-w-7xl\">\n      <ERDiagram />\n    </div>\n  );\n}\n","size_bytes":174},"client/src/components/examples/project-card.tsx":{"content":"import { ProjectCard } from \"../project-card\";\n\nexport default function ProjectCardExample() {\n  return (\n    <div className=\"p-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl\">\n      <ProjectCard\n        id=\"1\"\n        title=\"E-commerce Platform\"\n        description=\"Complete database schema for a multi-vendor e-commerce platform with products, orders, and user management\"\n        databaseType=\"PostgreSQL\"\n        createdAt=\"2 days ago\"\n        tableCount={12}\n        onEdit={() => console.log(\"Edit clicked\")}\n        onExport={() => console.log(\"Export clicked\")}\n        onDelete={() => console.log(\"Delete clicked\")}\n      />\n      <ProjectCard\n        id=\"2\"\n        title=\"Social Media App\"\n        description=\"Schema for a social networking platform with posts, comments, likes, and user relationships\"\n        databaseType=\"MongoDB\"\n        createdAt=\"1 week ago\"\n        tableCount={8}\n        onEdit={() => console.log(\"Edit clicked\")}\n        onExport={() => console.log(\"Export clicked\")}\n        onDelete={() => console.log(\"Delete clicked\")}\n      />\n      <ProjectCard\n        id=\"3\"\n        title=\"Food Delivery Service\"\n        description=\"Database design for a food delivery application with restaurants, menus, orders, and delivery tracking\"\n        databaseType=\"MySQL\"\n        createdAt=\"3 days ago\"\n        tableCount={15}\n        onEdit={() => console.log(\"Edit clicked\")}\n        onExport={() => console.log(\"Export clicked\")}\n        onDelete={() => console.log(\"Delete clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":1558},"client/src/components/examples/schema-output.tsx":{"content":"import { SchemaOutput } from \"../schema-output\";\n\nexport default function SchemaOutputExample() {\n  const sqlSchema = `CREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  name VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE posts (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES users(id),\n  title VARCHAR(500) NOT NULL,\n  content TEXT,\n  published BOOLEAN DEFAULT false,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);`;\n\n  const prismaSchema = `model User {\n  id        String   @id @default(uuid())\n  email     String   @unique\n  name      String\n  posts     Post[]\n  createdAt DateTime @default(now())\n}\n\nmodel Post {\n  id        String   @id @default(uuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id])\n  title     String\n  content   String?\n  published Boolean  @default(false)\n  createdAt DateTime @default(now())\n}`;\n\n  const mongooseSchema = `const userSchema = new Schema({\n  email: { type: String, required: true, unique: true },\n  name: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst postSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User' },\n  title: { type: String, required: true },\n  content: String,\n  published: { type: Boolean, default: false },\n  createdAt: { type: Date, default: Date.now }\n});`;\n\n  const explanation = `This schema is designed for a simple blogging platform. The Users table stores user information with unique email addresses. The Posts table contains blog posts with a foreign key relationship to Users, allowing each user to have multiple posts. The published flag enables draft functionality, and timestamps track creation dates for both entities.`;\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <SchemaOutput\n        sqlSchema={sqlSchema}\n        prismaSchema={prismaSchema}\n        mongooseSchema={mongooseSchema}\n        explanation={explanation}\n      />\n    </div>\n  );\n}\n","size_bytes":2069},"client/src/components/examples/theme-toggle.tsx":{"content":"import { ThemeToggle } from \"../theme-toggle\";\nimport { ThemeProvider } from \"../theme-provider\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":270},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}